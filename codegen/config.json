{
    "getIngore": [],
    "postIgnore": [
        "revoke",
        "token"
    ],
    "putIgnore": [
    ],
    "swaggerFix": {
        "paths": {
            "/restapi/v1.0/account/{accountId}/extension/{extensionId}/profile-image": {
                "put": {
                    "parameters": [
                        {
                            "name": "image",
                            "in": "formData",
                            "type": "file",
                            "category": "image",
                            "defaultType": "png"
                        }
                    ]
                }
            }
        }
    },
    "urlBuilders": {
        "ProfileImage": {
            "putMethod": {
                "nodeImports": {
                    "form-data": "FormData"
                },
                "body": "put(imageData: string | Blob | Buffer | NodeJS.ReadableStream, contentType=\"image/png\"): Promise<void> {\n        var form = new FormData();\n        form.append(\"image\", imageData, { contentType: contentType, filename: \"profile.\" + contentType.split('/').pop() });\n        return this.getService().put(this.getEndpoint(), form).then(function (res) {});\n    }"
            },
            "postMethod": {
                "nodeImports": {
                    "form-data": "FormData"
                },
                "body": "post(imageData: string | Blob | Buffer | NodeJS.ReadableStream, contentType=\"image/png\"): Promise<void> {\n        return this.put(imageData, contentType);\n    }"
            }
        },
        "Fax": {
            "postMethod": {
                "nodeImports": {
                    "form-data": "FormData"
                },
                "modelTypes": {"CallerInfo":1, "MessageInfo": 1},
                "body": "post(body: {\n        /** Recipient information. Phone number property is mandatory. Optional for resend fax request */\n        to?: CallerInfo[];\n        /** Fax resolution */\n        faxResolution?: \"High\" | \"Low\";\n        /** The datetime to send fax at, in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. If time is not specified, the fax will be send immediately */\n        sendTime?: string;\n        /** Optional. Cover page index. If not specified, the default cover page which is configured in \"Outbound Fax Settings\" is attached. See also 'Available Cover Pages' table below */\n        coverIndex?: number;\n        /** Optional. Cover page text, entered by the fax sender and printed on the cover page. Maximum length is limited to 1024 symbols */\n        coverPageText?: string;\n        /** Internal identifier of the original fax message which needs to be resent. Mandatory for resend fax request */\n        originalMessageId?: string;\n    },\n        attachments: (string | Blob | Buffer | NodeJS.ReadableStream)[]): Promise<MessageInfo> {\n        function inNode(): boolean {\n            return typeof process != \"undefined\" && !process[\"browser\"];\n        }\n\n        function browserSupportBlob(): boolean {\n            return typeof Blob == \"function\";\n        }\n        let meta = JSON.stringify(body);\n        let form = new FormData();\n        const jsonType = \"application/json\";\n        if (inNode()) {\n            console.log(\">>>>inNode\")\n            form.append(\"json\", meta, { filename: 'request.json', contentType: jsonType });\n            for (let i = 0; i < attachments.length; i++) {\n                let atch = attachments[i];\n                if (typeof atch == \"string\") {\n                    form.append(\"attachment\", atch, { contentType: \"text/plain\" });\n                } else {\n                    form.append(\"attachment\", atch);\n                }\n            }\n        } else if (browserSupportBlob()) {\n            form.append(\"json\", new Blob([meta], { type: jsonType }));\n            for (let i = 0; i < attachments.length; i++) {\n                let atch = attachments[i];\n                if (typeof atch == \"string\") {\n                    form.append(\"attachment\", new Blob([atch], { type: \"text/plain\" }));\n                } else {\n                    form.append(\"attachment\", atch);\n                }\n            }\n        } else {\n            return Promise.reject(\"Your're not in node and your environment does not support Blob or File API.\");\n        }\n\n        return this.getService().post(this.getEndpoint(false), form).then(res => res.json());\n    }"
            }
        }
    }
}