!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){(function(t){"use strict";function e(t){u.expect(t).to.has.keys(["navigation","paging","records","uri"])}var r,o,i=n(1),s=n(7),u=n(66),a=n(102),c=new Date;c.setFullYear(c.getFullYear()-1),before(function(){return i["default"].then(function(t){return r=t,o=new s["default"](r.app),o.login(r.user)})}),describe("Account",function(){it("Get Account info",function(){return o.account().get().then(function(t){u.expect(t).to.contain.keys(["id","uri","mainNumber","operator","serviceInfo","setupWizardState","status"])})}),it("Get Account info with id not exists should return 404",function(){return o.account("accountIdNotExist").get()["catch"](function(t){u.expect(t.apiResponse.response().status).to.eq(404),u.expect(t.apiResponse.json().errorCode).to.equal("InvalidParameter")})})}),describe("Extension",function(){var t=["uri","id","extensionNumber","contact","name","type","status","permissions","profileImage"];it("get current extension",function(){return o.account().extension().get().then(function(e){u.expect(e).to.contain.keys(t)})}),it("Get extension list",function(){return o.account().extension().list().then(function(n){e(n),u.expect(n.records[0]).to.has.keys(t)})}),it("Union type parameters, update extension info",function(){return o.account().extension().put({status:"Enabled"}).then(function(e){u.expect(e).to.contain.keys(t)})})}),describe("Binary response",function(){it("Get message content as binary",function(){var t=o.account().extension();return t.messageStore().list({dateFrom:c.toISOString()}).then(function(t){if(t.records.length<=0)throw new Error("No messages found for this extension.");return t.records[0]}).then(function(e){return t.messageStore(e.id).content(e.attachments[0].id).get().then(function(t){})})}),it("Get recording content",function(){var t=o.account().extension();return t.callLog().list({dateFrom:c.toISOString(),withRecording:!0}).then(function(t){if(t.records.length<=0)throw new Error("No recordings found.");return t.records[0].recording}).then(function(t){return o.account().recording(t.id+"").content().get().then(function(t){u.expect(t.headers.get("content-type")).to.has.string("audio/mpeg")})})})});var h=t+"/res/banner_index_logged.png";describe("Binary request",function(){a.createReadStream&&(it("Put profile image, input binary, response is empty.",function(){return o.account().extension().profileImage().put(a.createReadStream(h))}),it("Post profile image, input binary, response is empty.",function(){return o.account().extension().profileImage().post(a.createReadStream(h))}))}),describe("Fax",function(){it("send fax, post form data",function(){var t;return t=a.createReadStream?["Text attentment for test. Followed by a png picture.",a.createReadStream(h)]:["Test fax test sent from browser, "+navigator.userAgent],o.account().extension().fax().post({to:[{phoneNumber:"+16507411615"}]},t)}),it("send fax fail, empty parameter",function(){return o.account().extension().fax().post({},[]).then(function(t){throw new Error("should not send.")},function(t){u.expect(t.apiResponse.json().errorCode).to.eq("InvalidParameter")})})}),describe("Call Log",function(){it("Get call log",function(){return o.account().extension().callLog().list({dateFrom:c.toISOString(),perPage:2}).then(function(t){return e(t),t.records.length<1?console.warn("No call log items"):void u.expect(t.records[0]).to.has.keys(["uri","id","sessionId","startTime","duration","type","direction","action","result","to","from"])})}),it("delete today's call log",function(){return o.account().extension().callLog()["delete"]()})}),describe("post",function(){it("send sms, post plain object",function(){return o.account().extension().sms().post({from:{phoneNumber:r.user.username},text:"test sms text content.",to:[{phoneNumber:"+16507411615"}]}).then(function(t){u.expect(t).to.has.keys(["uri","id","to","from","type","creationTime","readStatus","priority","attachments","direction","availability","subject","messageStatus","smsSendingAttemptsCount","conversationId","conversation","lastModifiedTime"])})}),it("send sms, without from",function(){return o.account().extension().sms().post({text:"test sms text content.",to:[{phoneNumber:"+16507411615"}]}).then(function(t){throw new Error("should fail")})["catch"](function(t){u.expect(t.apiResponse.json().errorCode).to.eq("InvalidParameter")})})})}).call(e,"/")},function(t,e,n){(function(t){"use strict";n(3);var r=n(5),o="/data/rc-auth.json";"undefined"==typeof t||t.browser||(o="http://localhost"+o),Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r(o).then(function(t){return t.json()})}).call(e,n(2))},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(t){if(h===setTimeout)return setTimeout(t,0);if((h===n||!h)&&setTimeout)return h=setTimeout,setTimeout(t,0);try{return h(t,0)}catch(e){try{return h.call(null,t,0)}catch(e){return h.call(this,t,0)}}}function i(t){if(f===clearTimeout)return clearTimeout(t);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function s(){y&&l&&(y=!1,l.length?d=l.concat(d):v=-1,d.length&&u())}function u(){if(!y){var t=o(s);y=!0;for(var e=d.length;e;){for(l=d,d=[];++v<e;)l&&l[v].run();v=-1,e=d.length}l=null,y=!1,i(t)}}function a(t,e){this.fun=t,this.array=e}function c(){}var h,f,p=t.exports={};!function(){try{h="function"==typeof setTimeout?setTimeout:n}catch(t){h=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(t){f=r}}();var l,d=[],y=!1,v=-1;p.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new a(t,e)),1!==d.length||y||o(u)},a.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=c,p.addListener=c,p.once=c,p.off=c,p.removeListener=c,p.removeAllListeners=c,p.emit=c,p.binding=function(t){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(t){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(t,e,n){(function(e,r){/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   3.3.1
	 */
!function(e,n){t.exports=n()}(this,function(){"use strict";function t(t){return"function"==typeof t||"object"==typeof t&&null!==t}function o(t){return"function"==typeof t}function i(t){W=t}function s(t){X=t}function u(){return function(){return e.nextTick(p)}}function a(){return function(){J(p)}}function c(){var t=0,e=new Q(p),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function h(){var t=new MessageChannel;return t.port1.onmessage=p,function(){return t.port2.postMessage(0)}}function f(){var t=setTimeout;return function(){return t(p,1)}}function p(){for(var t=0;t<V;t+=2){var e=nt[t],n=nt[t+1];e(n),nt[t]=void 0,nt[t+1]=void 0}V=0}function l(){try{var t=n(4);return J=t.runOnLoop||t.runOnContext,a()}catch(e){return f()}}function d(t,e){var n=arguments,r=this,o=new this.constructor(v);void 0===o[ot]&&L(o);var i=r._state;return i?!function(){var t=n[i-1];X(function(){return M(i,o,t,r._result)})}():P(r,o,t,e),o}function y(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(v);return O(n,t),n}function v(){}function g(){return new TypeError("You cannot resolve a promise with itself")}function b(){return new TypeError("A promises callback cannot return that same promise.")}function m(t){try{return t.then}catch(e){return at.error=e,at}}function _(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function w(t,e,n){X(function(t){var r=!1,o=_(n,e,function(n){r||(r=!0,e!==n?O(t,n):k(t,n))},function(e){r||(r=!0,j(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,j(t,o))},t)}function x(t,e){e._state===st?k(t,e._result):e._state===ut?j(t,e._result):P(e,void 0,function(e){return O(t,e)},function(e){return j(t,e)})}function E(t,e,n){e.constructor===t.constructor&&n===d&&e.constructor.resolve===y?x(t,e):n===at?j(t,at.error):void 0===n?k(t,e):o(n)?w(t,e,n):k(t,e)}function O(e,n){e===n?j(e,g()):t(n)?E(e,n,m(n)):k(e,n)}function S(t){t._onerror&&t._onerror(t._result),T(t)}function k(t,e){t._state===it&&(t._result=e,t._state=st,0!==t._subscribers.length&&X(T,t))}function j(t,e){t._state===it&&(t._state=ut,t._result=e,X(S,t))}function P(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+st]=n,o[i+ut]=r,0===i&&t._state&&X(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?M(n,r,o,i):o(i);t._subscribers.length=0}}function R(){this.error=null}function A(t,e){try{return t(e)}catch(n){return ct.error=n,ct}}function M(t,e,n,r){var i=o(n),s=void 0,u=void 0,a=void 0,c=void 0;if(i){if(s=A(n,r),s===ct?(c=!0,u=s.error,s=null):a=!0,e===s)return void j(e,b())}else s=r,a=!0;e._state!==it||(i&&a?O(e,s):c?j(e,u):t===st?k(e,s):t===ut&&j(e,s))}function C(t,e){try{e(function(e){O(t,e)},function(e){j(t,e)})}catch(n){j(t,n)}}function B(){return ht++}function L(t){t[ot]=ht++,t._state=void 0,t._result=void 0,t._subscribers=[]}function N(t,e){this._instanceConstructor=t,this.promise=new t(v),this.promise[ot]||L(this.promise),Y(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?k(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&k(this.promise,this._result))):j(this.promise,U())}function U(){return new Error("Array Methods must be provided an Array")}function q(t){return new N(this,t).promise}function I(t){var e=this;return new e(Y(t)?function(n,r){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(n,r)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function D(t){var e=this,n=new e(v);return j(n,t),n}function F(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function z(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function H(t){this[ot]=B(),this._result=this._state=void 0,this._subscribers=[],v!==t&&("function"!=typeof t&&F(),this instanceof H?C(this,t):z())}function K(){var t=void 0;if("undefined"!=typeof r)t=r;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;if(n){var o=null;try{o=Object.prototype.toString.call(n.resolve())}catch(e){}if("[object Promise]"===o&&!n.cast)return}t.Promise=H}var G=void 0;G=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var Y=G,V=0,J=void 0,W=void 0,X=function(t,e){nt[V]=t,nt[V+1]=e,V+=2,2===V&&(W?W(p):rt())},$="undefined"!=typeof window?window:void 0,Z=$||{},Q=Z.MutationObserver||Z.WebKitMutationObserver,tt="undefined"==typeof self&&"undefined"!=typeof e&&"[object process]"==={}.toString.call(e),et="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,nt=new Array(1e3),rt=void 0;rt=tt?u():Q?c():et?h():void 0===$?l():f();var ot=Math.random().toString(36).substring(16),it=void 0,st=1,ut=2,at=new R,ct=new R,ht=0;return N.prototype._enumerate=function(){for(var t=this.length,e=this._input,n=0;this._state===it&&n<t;n++)this._eachEntry(e[n],n)},N.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===y){var o=m(t);if(o===d&&t._state!==it)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===H){var i=new n(v);E(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},N.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===it&&(this._remaining--,t===ut?j(r,n):this._result[e]=n),0===this._remaining&&k(r,this._result)},N.prototype._willSettleAt=function(t,e){var n=this;P(t,void 0,function(t){return n._settledAt(st,e,t)},function(t){return n._settledAt(ut,e,t)})},H.all=q,H.race=I,H.resolve=y,H.reject=D,H._setScheduler=i,H._setAsap=s,H._asap=X,H.prototype={constructor:H,then:d,"catch":function(t){return this.then(null,t)}},K(),H.polyfill=K,H.Promise=H,H})}).call(e,n(2),function(){return this}())},function(t,e){},function(t,e,n){n(6),t.exports=self.fetch.bind(self)},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function n(t){return"string"!=typeof t&&(t=String(t)),t}function r(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return y.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function u(t){var e=new FileReader;return e.readAsArrayBuffer(t),s(e)}function a(t){var e=new FileReader;return e.readAsText(t),s(e)}function c(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(y.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(y.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(y.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!y.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):y.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},y.blob?(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(u)},this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return a(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=i(this);return t?t:Promise.resolve(this._bodyText)},y.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return v.indexOf(e)>-1?e:t}function f(t,e){e=e||{};var n=e.body;if(f.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,n||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}}),e}function l(t){var e=new o,n=(t.getAllResponseHeaders()||"").trim().split("\n");return n.forEach(function(t){var n=t.trim().split(":"),r=n.shift().trim(),o=n.join(":").trim();e.append(r,o)}),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof o?e.headers:new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var y={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};o.prototype.append=function(t,r){t=e(t),r=n(r);var o=this.map[t];o||(o=[],this.map[t]=o),o.push(r)},o.prototype["delete"]=function(t){delete this.map[e(t)]},o.prototype.get=function(t){var n=this.map[e(t)];return n?n[0]:null},o.prototype.getAll=function(t){return this.map[e(t)]||[]},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,r){this.map[e(t)]=[n(r)]},o.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){t.call(e,r,n,this)},this)},this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),r(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),r(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),r(t)},y.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];f.prototype.clone=function(){return new f(this)},c.call(f.prototype),c.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var g=[301,302,303,307,308];d.redirect=function(t,e){if(g.indexOf(e)===-1)throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=f,t.Response=d,t.fetch=function(t,e){return new Promise(function(n,r){function o(){return"responseURL"in s?s.responseURL:/^X-Request-URL:/m.test(s.getAllResponseHeaders())?s.getResponseHeader("X-Request-URL"):void 0}var i;i=f.prototype.isPrototypeOf(t)&&!e?t:new f(t,e);var s=new XMLHttpRequest;s.onload=function(){var t={status:s.status,statusText:s.statusText,headers:l(s),url:o()},e="response"in s?s.response:s.responseText;n(new d(e,t))},s.onerror=function(){r(new TypeError("Network request failed"))},s.ontimeout=function(){r(new TypeError("Network request failed"))},s.open(i.method,i.url,!0),"include"===i.credentials&&(s.withCredentials=!0),"responseType"in s&&y.blob&&(s.responseType="blob"),i.headers.forEach(function(t,e){s.setRequestHeader(e,t)}),s.send("undefined"==typeof i._bodyInit?null:i._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";var r=n(8),o=n(14),i=n(54),s=n(56),u=n(59),a=function(){function t(t){t instanceof u?this.service=t:(t.server=t.server||c,this.service=new u(t))}return t.prototype.loginUrl=function(t){return this.service.platform().loginUrl(t)},t.prototype.login=function(t){return this.service.platform().login(t)},t.prototype.getAuthCode=function(t){var e=r.parse(t,!0).query,n=e.code;if(n)return n;if(e.error_description){var o=new Error(e.error_description);throw o.name=e.error,o.errors=e.errors,o}},t.prototype.logout=function(){return this.service.platform().logout()},t.prototype.on=function(t,e){this.service.platform().on(t,e)},t.prototype.createSubscription=function(){return this.service.createSubscription()},t.prototype.ensureLoggedIn=function(){return this.service.platform().ensureLoggedIn()},t.prototype.account=function(t){return new o["default"](null,t,this.service.platform())},t.prototype.clientInfo=function(){return new i["default"](null,null,this.service.platform())},t.prototype.numberPool=function(){return new s["default"](null,null,this.service.platform())},t}();Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=a,e.Client=a;var c="https://platform.ringcentral.com";e.SERVER_PRODUCTION=c;var h="https://platform.devtest.ringcentral.com";e.SERVER_SANDBOX=h;var f="beforeLogin";e.EVENT_LOGIN_START=f;var p="loginSuccess";e.EVENT_LOGIN_SUCCESS=p;var l="loginError";e.EVENT_LOGIN_ERROR=l;var d="beforeRefresh";e.EVENT_REFRESH_START=d;var y="refreshSuccess";e.EVENT_REFRESH_SUCCESS=y;var v="refreshError";e.EVENT_REFRESH_ERROR=v;var g="beforeLogout";e.EVENT_LOGOUT_START=g;var b="logoutSuccess";e.EVENT_LOGOUT_SUCCESS=b;var m="logoutError";e.EVENT_LOGOUT_ERROR=m},function(t,e,n){function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function o(t,e,n){if(t&&c(t)&&t instanceof r)return t;var o=new r;return o.parse(t,e,n),o}function i(t){return a(t)&&(t=o(t)),t instanceof r?t.format():r.prototype.format.call(t)}function s(t,e){return o(t,!1,!0).resolve(e)}function u(t,e){return t?o(t,!1,!0).resolveObject(e):e}function a(t){return"string"==typeof t}function c(t){return"object"==typeof t&&null!==t}function h(t){return null===t}function f(t){return null==t}var p=n(9);e.parse=o,e.resolve=s,e.resolveObject=u,e.format=i,e.Url=r;var l=/^([a-z0-9.+-]+:)/i,d=/:[0-9]*$/,y=["<",">",'"',"`"," ","\r","\n","\t"],v=["{","}","|","\\","^","`"].concat(y),g=["'"].concat(v),b=["%","/","?",";","#"].concat(g),m=["/","?","#"],_=255,w=/^[a-z0-9A-Z_-]{0,63}$/,x=/^([a-z0-9A-Z_-]{0,63})(.*)$/,E={javascript:!0,"javascript:":!0},O={javascript:!0,"javascript:":!0},S={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},k=n(11);r.prototype.parse=function(t,e,n){if(!a(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var r=t;r=r.trim();var o=l.exec(r);if(o){o=o[0];var i=o.toLowerCase();this.protocol=i,r=r.substr(o.length)}if(n||o||r.match(/^\/\/[^@\/]+@[^@\/]+/)){var s="//"===r.substr(0,2);!s||o&&O[o]||(r=r.substr(2),this.slashes=!0)}if(!O[o]&&(s||o&&!S[o])){for(var u=-1,c=0;c<m.length;c++){var h=r.indexOf(m[c]);h!==-1&&(u===-1||h<u)&&(u=h)}var f,d;d=u===-1?r.lastIndexOf("@"):r.lastIndexOf("@",u),d!==-1&&(f=r.slice(0,d),r=r.slice(d+1),this.auth=decodeURIComponent(f)),u=-1;for(var c=0;c<b.length;c++){var h=r.indexOf(b[c]);h!==-1&&(u===-1||h<u)&&(u=h)}u===-1&&(u=r.length),this.host=r.slice(0,u),r=r.slice(u),this.parseHost(),this.hostname=this.hostname||"";var y="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!y)for(var v=this.hostname.split(/\./),c=0,j=v.length;c<j;c++){var P=v[c];if(P&&!P.match(w)){for(var T="",R=0,A=P.length;R<A;R++)T+=P.charCodeAt(R)>127?"x":P[R];if(!T.match(w)){var M=v.slice(0,c),C=v.slice(c+1),B=P.match(x);B&&(M.push(B[1]),C.unshift(B[2])),C.length&&(r="/"+C.join(".")+r),this.hostname=M.join(".");break}}}if(this.hostname.length>_?this.hostname="":this.hostname=this.hostname.toLowerCase(),!y){for(var L=this.hostname.split("."),N=[],c=0;c<L.length;++c){var U=L[c];N.push(U.match(/[^A-Za-z0-9_-]/)?"xn--"+p.encode(U):U)}this.hostname=N.join(".")}var q=this.port?":"+this.port:"",I=this.hostname||"";this.host=I+q,this.href+=this.host,y&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==r[0]&&(r="/"+r))}if(!E[i])for(var c=0,j=g.length;c<j;c++){var D=g[c],F=encodeURIComponent(D);F===D&&(F=escape(D)),r=r.split(D).join(F)}var z=r.indexOf("#");z!==-1&&(this.hash=r.substr(z),r=r.slice(0,z));var H=r.indexOf("?");if(H!==-1?(this.search=r.substr(H),this.query=r.substr(H+1),e&&(this.query=k.parse(this.query)),r=r.slice(0,H)):e&&(this.search="",this.query={}),r&&(this.pathname=r),S[i]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var q=this.pathname||"",U=this.search||"";this.path=q+U}return this.href=this.format(),this},r.prototype.format=function(){var t=this.auth||"";t&&(t=encodeURIComponent(t),t=t.replace(/%3A/i,":"),t+="@");var e=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,i="";this.host?o=t+this.host:this.hostname&&(o=t+(this.hostname.indexOf(":")===-1?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&c(this.query)&&Object.keys(this.query).length&&(i=k.stringify(this.query));var s=this.search||i&&"?"+i||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||S[e])&&o!==!1?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),n=n.replace(/[?#]/g,function(t){return encodeURIComponent(t)}),s=s.replace("#","%23"),e+o+n+s+r},r.prototype.resolve=function(t){return this.resolveObject(o(t,!1,!0)).format()},r.prototype.resolveObject=function(t){if(a(t)){var e=new r;e.parse(t,!1,!0),t=e}var n=new r;if(Object.keys(this).forEach(function(t){n[t]=this[t]},this),n.hash=t.hash,""===t.href)return n.href=n.format(),n;if(t.slashes&&!t.protocol)return Object.keys(t).forEach(function(e){"protocol"!==e&&(n[e]=t[e])}),S[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n;if(t.protocol&&t.protocol!==n.protocol){if(!S[t.protocol])return Object.keys(t).forEach(function(e){n[e]=t[e]}),n.href=n.format(),n;if(n.protocol=t.protocol,t.host||O[t.protocol])n.pathname=t.pathname;else{for(var o=(t.pathname||"").split("/");o.length&&!(t.host=o.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==o[0]&&o.unshift(""),o.length<2&&o.unshift(""),n.pathname=o.join("/")}if(n.search=t.search,n.query=t.query,n.host=t.host||"",n.auth=t.auth,n.hostname=t.hostname||t.host,n.port=t.port,n.pathname||n.search){var i=n.pathname||"",s=n.search||"";n.path=i+s}return n.slashes=n.slashes||t.slashes,n.href=n.format(),n}var u=n.pathname&&"/"===n.pathname.charAt(0),c=t.host||t.pathname&&"/"===t.pathname.charAt(0),p=c||u||n.host&&t.pathname,l=p,d=n.pathname&&n.pathname.split("/")||[],o=t.pathname&&t.pathname.split("/")||[],y=n.protocol&&!S[n.protocol];if(y&&(n.hostname="",n.port=null,n.host&&(""===d[0]?d[0]=n.host:d.unshift(n.host)),n.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===o[0]?o[0]=t.host:o.unshift(t.host)),t.host=null),p=p&&(""===o[0]||""===d[0])),c)n.host=t.host||""===t.host?t.host:n.host,n.hostname=t.hostname||""===t.hostname?t.hostname:n.hostname,n.search=t.search,n.query=t.query,d=o;else if(o.length)d||(d=[]),d.pop(),d=d.concat(o),n.search=t.search,n.query=t.query;else if(!f(t.search)){if(y){n.hostname=n.host=d.shift();var v=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@");v&&(n.auth=v.shift(),n.host=n.hostname=v.shift())}return n.search=t.search,n.query=t.query,h(n.pathname)&&h(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!d.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var g=d.slice(-1)[0],b=(n.host||t.host)&&("."===g||".."===g)||""===g,m=0,_=d.length;_>=0;_--)g=d[_],"."==g?d.splice(_,1):".."===g?(d.splice(_,1),m++):m&&(d.splice(_,1),m--);if(!p&&!l)for(;m--;m)d.unshift("..");!p||""===d[0]||d[0]&&"/"===d[0].charAt(0)||d.unshift(""),b&&"/"!==d.join("/").substr(-1)&&d.push("");var w=""===d[0]||d[0]&&"/"===d[0].charAt(0);if(y){n.hostname=n.host=w?"":d.length?d.shift():"";var v=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@");v&&(n.auth=v.shift(),n.host=n.hostname=v.shift())}return p=p||n.host&&d.length,p&&!w&&d.unshift(""),d.length?n.pathname=d.join("/"):(n.pathname=null,n.path=null),h(n.pathname)&&h(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=t.auth||n.auth,n.slashes=n.slashes||t.slashes,n.href=n.format(),n},r.prototype.parseHost=function(){var t=this.host,e=d.exec(t);e&&(e=e[0],":"!==e&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,n){var r;(function(t,o){!function(i){function s(t){throw RangeError(M[t])}function u(t,e){for(var n=t.length,r=[];n--;)r[n]=e(t[n]);return r}function a(t,e){var n=t.split("@"),r="";n.length>1&&(r=n[0]+"@",t=n[1]),t=t.replace(A,".");var o=t.split("."),i=u(o,e).join(".");return r+i}function c(t){for(var e,n,r=[],o=0,i=t.length;o<i;)e=t.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(n=t.charCodeAt(o++),56320==(64512&n)?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--)):r.push(e);return r}function h(t){return u(t,function(t){var e="";return t>65535&&(t-=65536,e+=L(t>>>10&1023|55296),t=56320|1023&t),e+=L(t)}).join("")}function f(t){return t-48<10?t-22:t-65<26?t-65:t-97<26?t-97:w}function p(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function l(t,e,n){var r=0;for(t=n?B(t/S):t>>1,t+=B(t/e);t>C*E>>1;r+=w)t=B(t/C);return B(r+(C+1)*t/(t+O))}function d(t){var e,n,r,o,i,u,a,c,p,d,y=[],v=t.length,g=0,b=j,m=k;for(n=t.lastIndexOf(P),n<0&&(n=0),r=0;r<n;++r)t.charCodeAt(r)>=128&&s("not-basic"),y.push(t.charCodeAt(r));for(o=n>0?n+1:0;o<v;){for(i=g,u=1,a=w;o>=v&&s("invalid-input"),c=f(t.charCodeAt(o++)),(c>=w||c>B((_-g)/u))&&s("overflow"),g+=c*u,p=a<=m?x:a>=m+E?E:a-m,!(c<p);a+=w)d=w-p,u>B(_/d)&&s("overflow"),u*=d;e=y.length+1,m=l(g-i,e,0==i),B(g/e)>_-b&&s("overflow"),b+=B(g/e),g%=e,y.splice(g++,0,b)}return h(y)}function y(t){var e,n,r,o,i,u,a,h,f,d,y,v,g,b,m,O=[];for(t=c(t),v=t.length,e=j,n=0,i=k,u=0;u<v;++u)y=t[u],y<128&&O.push(L(y));for(r=o=O.length,o&&O.push(P);r<v;){for(a=_,u=0;u<v;++u)y=t[u],y>=e&&y<a&&(a=y);for(g=r+1,a-e>B((_-n)/g)&&s("overflow"),n+=(a-e)*g,e=a,u=0;u<v;++u)if(y=t[u],y<e&&++n>_&&s("overflow"),y==e){for(h=n,f=w;d=f<=i?x:f>=i+E?E:f-i,!(h<d);f+=w)m=h-d,b=w-d,O.push(L(p(d+m%b,0))),h=B(m/b);O.push(L(p(h,0))),i=l(n,g,r==o),n=0,++r}++n,++e}return O.join("")}function v(t){return a(t,function(t){return T.test(t)?d(t.slice(4).toLowerCase()):t})}function g(t){return a(t,function(t){return R.test(t)?"xn--"+y(t):t})}var b=("object"==typeof e&&e&&!e.nodeType&&e,"object"==typeof t&&t&&!t.nodeType&&t,"object"==typeof o&&o);b.global!==b&&b.window!==b&&b.self!==b||(i=b);var m,_=2147483647,w=36,x=1,E=26,O=38,S=700,k=72,j=128,P="-",T=/^xn--/,R=/[^\x20-\x7E]/,A=/[\x2E\u3002\uFF0E\uFF61]/g,M={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},C=w-x,B=Math.floor,L=String.fromCharCode;m={version:"1.3.2",ucs2:{decode:c,encode:h},decode:d,encode:y,toASCII:g,toUnicode:v},r=function(){return m}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}(this)}).call(e,n(10)(t),function(){return this}())},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e,n){"use strict";e.decode=e.parse=n(12),e.encode=e.stringify=n(13)},function(t,e){"use strict";function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,r,o){e=e||"&",r=r||"=";var i={};if("string"!=typeof t||0===t.length)return i;var s=/\+/g;t=t.split(e);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var a=t.length;u>0&&a>u&&(a=u);for(var c=0;c<a;++c){var h,f,p,l,d=t[c].replace(s,"%20"),y=d.indexOf(r);y>=0?(h=d.substr(0,y),f=d.substr(y+1)):(h=d,f=""),p=decodeURIComponent(h),l=decodeURIComponent(f),n(i,p)?Array.isArray(i[p])?i[p].push(l):i[p]=[i[p],l]:i[p]=l}return i}},function(t,e){"use strict";var n=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,r,o){return e=e||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map(function(o){var i=encodeURIComponent(n(o))+r;return Array.isArray(t[o])?t[o].map(function(t){return i+encodeURIComponent(n(t))}).join(e):i+encodeURIComponent(n(t[o]))}).join(e):o?encodeURIComponent(n(o))+r+encodeURIComponent(n(t)):""}},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(16),s=n(17),u=n(18),a=n(19),c=n(21),h=n(22),f=n(23),p=n(52),l=n(47),d=n(53),y=n(42),v=function(t){function e(e,n,r){t.call(this,"account",n||"~",e,r)}return r(e,t),e.prototype.activeCalls=function(t){return new i["default"](this,t)},e.prototype.businessAddress=function(t){return new s["default"](this,t)},e.prototype.callLog=function(t){return new u["default"](this,t)},e.prototype.department=function(t){return new a["default"](this,t)},e.prototype.device=function(t){return new c["default"](this,t)},e.prototype.dialingPlan=function(t){return new h["default"](this,t)},e.prototype.extension=function(t){return new f["default"](this,t)},e.prototype.order=function(t){return new p["default"](this,t)},e.prototype.phoneNumber=function(t){return new l["default"](this,t)},e.prototype.recording=function(t){return new d["default"](this,t)},e.prototype.serviceInfo=function(t){return new y["default"](this,t)},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=v},function(t,e){"use strict";var n=function(){function t(t,e,n,r){this._service=r,this.name=t,this.value=e||null,this.previous=n}return t.prototype.toString=function(t){void 0===t&&(t=!0);var e="/"+this.name;return t&&this.value&&(e+="/"+this.value),e},t.prototype.getEndpoint=function(t){void 0===t&&(t=!0);var e="";return this.previous&&(e=this.previous.getEndpoint()),e+this.toString(t)},t.prototype.getService=function(){for(var t=this;t;){if(t._service)return t._service;t.previous&&(t=t.previous)}},t}();Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"active-calls",n,e,r)}return r(e,t),e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"business-address",n,e,r)}return r(e,t),e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"call-log",n,e,r)}return r(e,t),e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype["delete"]=function(t){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.response()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(20),s=function(t){function e(e,n,r){t.call(this,"department",n,e,r)}return r(e,t),e.prototype.members=function(t){return new i["default"](this,t)},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"members",n,e,r)}return r(e,t),e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"device",n,e,r)}return r(e,t),e.prototype.list=function(){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"dialing-plan",n,e,r)}return r(e,t),e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,
new n)},o=n(15),i=n(16),s=n(24),u=n(25),a=n(28),c=n(29),h=n(31),f=n(32),p=n(18),l=n(33),d=n(34),y=n(35),v=n(21),g=n(36),b=n(38),m=n(39),_=n(40),w=n(41),x=n(44),E=n(46),O=n(47),S=n(48),k=n(49),j=n(50),P=n(51),T=function(t){function e(e,n,r){t.call(this,"extension",n||"~",e,r)}return r(e,t),e.prototype.activeCalls=function(t){return new i["default"](this,t)},e.prototype.addressBookSync=function(t){return new s["default"](this,t)},e.prototype.addressBook=function(t){return new u["default"](this,t)},e.prototype.answeringRule=function(t){return new a["default"](this,t)},e.prototype.authzProfile=function(t){return new c["default"](this,t)},e.prototype.blockedNumber=function(t){return new h["default"](this,t)},e.prototype.businessHours=function(t){return new f["default"](this,t)},e.prototype.callLog=function(t){return new p["default"](this,t)},e.prototype.callLogSync=function(t){return new l["default"](this,t)},e.prototype.companyPager=function(t){return new d["default"](this,t)},e.prototype.conferencing=function(t){return new y["default"](this,t)},e.prototype.device=function(t){return new v["default"](this,t)},e.prototype.fax=function(t){return new g["default"](this,t)},e.prototype.forwardingNumber=function(t){return new b["default"](this,t)},e.prototype.grant=function(t){return new m["default"](this,t)},e.prototype.greeting=function(t){return new _["default"](this,t)},e.prototype.meeting=function(t){return new w["default"](this,t)},e.prototype.messageStore=function(t){return new x["default"](this,t)},e.prototype.messageSync=function(t){return new E["default"](this,t)},e.prototype.phoneNumber=function(t){return new O["default"](this,t)},e.prototype.presence=function(t){return new S["default"](this,t)},e.prototype.profileImage=function(t){return new k["default"](this,t)},e.prototype.ringout=function(t){return new j["default"](this,t)},e.prototype.sms=function(t){return new P["default"](this,t)},e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=T},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"address-book-sync",n,e,r)}return r(e,t),e.prototype.get=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(26),s=n(27),u=function(t){function e(e,n,r){t.call(this,"address-book",n,e,r)}return r(e,t),e.prototype.contact=function(t){return new i["default"](this,t)},e.prototype.group=function(t){return new s["default"](this,t)},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"contact",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e.prototype["delete"]=function(){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"group",n,e,r)}return r(e,t),e.prototype.list=function(){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"answering-rule",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.list=function(){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype["delete"]=function(){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(30),s=function(t){function e(e,n,r){t.call(this,"authz-profile",n,e,r)}return r(e,t),e.prototype.check=function(t){return new i["default"](this,t)},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"check",n,e,r)}return r(e,t),e.prototype.get=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"blocked-number",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.list=function(){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype["delete"]=function(){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"business-hours",n,e,r)}return r(e,t),e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"call-log-sync",n,e,r)}return r(e,t),e.prototype.get=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"company-pager",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"conferencing",n,e,r)}return r(e,t),e.prototype.get=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){(function(t){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(37),s=function(e){function n(t,n,r){e.call(this,"fax",n,t,r)}return r(n,e),n.prototype.post=function(e,n){function r(){return"undefined"!=typeof t&&!t.browser}function o(){return"function"==typeof Blob}var s=JSON.stringify(e),u=new i,a="application/json";if(r()){u.append("json",s,{filename:"request.json",contentType:a});for(var c=0;c<n.length;c++){var h=n[c];"string"==typeof h?u.append("attachment",h,{contentType:"text/plain"}):u.append("attachment",h)}}else{if(!o())return Promise.reject("Your're not in node and your environment does not support Blob or File API.");u.append("json",new Blob([s],{type:a}));for(var c=0;c<n.length;c++){var h=n[c];"string"==typeof h?u.append("attachment",new Blob([h],{type:"text/plain"})):u.append("attachment",h)}}return this.getService().post(this.getEndpoint(!1),u).then(function(t){return t.json()})},n}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s}).call(e,n(2))},function(t,e){t.exports=window.FormData},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"forwarding-number",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"grant",n,e,r)}return r(e,t),e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"greeting",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(42),s=n(43),u=function(t){function e(e,n,r){t.call(this,"meeting",n,e,r)}return r(e,t),e.prototype.serviceInfo=function(t){return new i["default"](this,t)},e.prototype.end=function(t){return new s["default"](this,t)},e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.list=function(){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype["delete"]=function(){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"service-info",n,e,r)}return r(e,t),e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"end",n,e,r)}return r(e,t),e.prototype.post=function(){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(45),s=function(t){function e(e,n,r){t.call(this,"message-store",n,e,r)}return r(e,t),e.prototype.content=function(t){return new i["default"](this,t)},e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e.prototype["delete"]=function(t){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.response()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"content",n,e,r)}return r(e,t),e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"message-sync",n,e,r)}return r(e,t),e.prototype.get=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"phone-number",n,e,r)}return r(e,t),e.prototype.list=function(t){return this.getService().send({method:"get",url:this.getEndpoint(!1),query:t,body:void 0}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"presence",n,e,r)}return r(e,t),e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(37),s=function(t){function e(e,n,r){t.call(this,"profile-image",n,e,r)}return r(e,t),e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e.prototype.put=function(t,e){void 0===e&&(e="image/png");var n=new i;return n.append("image",t,{contentType:e,filename:"profile."+e.split("/").pop()}),this.getService().put(this.getEndpoint(),n).then(function(t){})},e.prototype.post=function(t,e){void 0===e&&(e="image/png");var n=new i;return n.append("image",t,{contentType:e,filename:"profile."+e.split("/").pop()}),this.getService().put(this.getEndpoint(),n).then(function(t){})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"ringout",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype["delete"]=function(){return this.getService().send({method:"delete",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.response()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"sms",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"order",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(45),s=function(t){function e(e,n,r){t.call(this,"recording",n,e,r)}return r(e,t),e.prototype.content=function(t){return new i["default"](this,t)},e.prototype.get=function(){return this.getService().send({method:"get",url:this.getEndpoint(!0),query:void 0,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(55),s=function(t){function e(e,n,r){t.call(this,"client-info",n,e,r)}return r(e,t),e.prototype.customData=function(t){return new i["default"](this,t)},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=s},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"custom-data",n,e,r)}return r(e,t),e.prototype.put=function(t){return this.getService().send({method:"put",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=n(57),s=n(58),u=function(t){function e(e,n,r){t.call(this,"number-pool",n,e,r)}return r(e,t),e.prototype.lookup=function(t){return new i["default"](this,t)},e.prototype.reserve=function(t){return new s["default"](this,t)},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"lookup",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:t,body:void 0}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){"use strict";var r=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},o=n(15),i=function(t){function e(e,n,r){t.call(this,"reserve",n,e,r)}return r(e,t),e.prototype.post=function(t){return this.getService().send({method:"post",url:this.getEndpoint(!0),query:void 0,body:t}).then(function(t){return t.json()})},e}(o["default"]);Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},function(t,e,n){(function(e,r){!function(e,r){t.exports=r(n(3),n(64),n(65))}(this,function(t,n,o){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="/build/",e(0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n(2);var s=n(3),u=o(s),a=n(11),c=r(a),h=n(4),f=o(h),p=n(12),l=r(p),d=n(13),y=r(d),v=n(14),g=r(v),b=n(15),m=r(b),_=n(17),w=r(_),x=n(16),E=r(x),O=n(18),S=r(O),k=n(19),j=r(k),P=n(21),T=r(P),R=n(23),A=r(R),M=n(24),C=r(M),B=n(20),L=r(B),N=function(){function t(e){var n=e.server,r=e.cachePrefix,o=e.appSecret,s=e.appKey,u=e.appName,a=e.appVersion,h=e.pubnubFactory,p=e.client,l=e.redirectUri;if(i(this,t),!f.fetch)throw new Error("Native Fetch is missing, set RingCentral.SDK.core.Externals.fetch to your favorite alternative");if(!f.Promise)throw new Error("Native Promise is missing, set RingCentral.SDK.core.Externals.Promise to your favorite alternative");this._cache=new c["default"](f.localStorage,r),this._client=p||new y["default"],this._platform=new S["default"]({client:this._client,cache:this._cache,version:t.version,server:n,appKey:s,appSecret:o,appName:u,appVersion:a,redirectUri:l}),this._pubnubFactory=h||f.PUBNUB}return t.prototype.platform=function(){return this._platform},t.prototype.createSubscription=function(){return new A["default"](this._pubnubFactory,this._platform)},t.prototype.createCachedSubscription=function(t){return new C["default"](this._pubnubFactory,this._platform,this._cache,t)},t.prototype.cache=function(){return this._cache},t.handleLoginRedirect=function(t){var e,n=window.location.hash?window.location.hash:window.location.search;window.opener.postMessage((e={},e[L["default"].authResponseProperty]=n,e),t||window.location.origin)},t}();N.version=L["default"].version,N.server={sandbox:"https://platform.devtest.ringcentral.com",production:"https://platform.ringcentral.com"},N.core={Cache:c["default"],EventEmitter:l["default"],Utils:u,Externals:f},N.http={Client:y["default"],ApiResponse:g["default"]},N.platform={Auth:j["default"],Platform:S["default"]},N.subscription={Subscription:A["default"]},N.mocks={Client:m["default"],Registry:E["default"],Mock:w["default"]},N.pubnub={PubnubMockFactory:T["default"]},t.exports=N},function(t,n){(function(n){!function(n){"use strict";function r(t,e,n,r){var o=Object.create((e||i).prototype),s=new d(r||[]);return o._invoke=f(t,n,s),o}function o(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(r){return{type:"throw",arg:r}}}function i(){}function s(){}function u(){}function a(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function c(t){this.arg=t}function h(t){function n(e,n){var r=t[e](n),o=r.value;return o instanceof c?Promise.resolve(o.arg).then(i,s):Promise.resolve(o).then(function(t){return r.value=t,r})}function r(t,e){function r(){return n(t,e)}return o=o?o.then(r,r):new Promise(function(t){t(r())})}"object"==typeof e&&e.domain&&(n=e.domain.bind(n));var o,i=n.bind(t,"next"),s=n.bind(t,"throw");n.bind(t,"return");this._invoke=r}function f(t,e,n){var r=x;return function(i,s){if(r===O)throw new Error("Generator is already running");if(r===S){if("throw"===i)throw s;return v()}for(;;){var u=n.delegate;if(u){if("return"===i||"throw"===i&&u.iterator[i]===g){n.delegate=null;var a=u.iterator["return"];if(a){var c=o(a,u.iterator,s);if("throw"===c.type){i="throw",s=c.arg;continue}}if("return"===i)continue}var c=o(u.iterator[i],u.iterator,s);if("throw"===c.type){n.delegate=null,i="throw",s=c.arg;continue}i="next",s=g;var h=c.arg;if(!h.done)return r=E,h;n[u.resultName]=h.value,n.next=u.nextLoc,n.delegate=null}if("next"===i)n._sent=s,r===E?n.sent=s:n.sent=g;else if("throw"===i){if(r===x)throw r=S,s;n.dispatchException(s)&&(i="next",s=g)}else"return"===i&&n.abrupt("return",s);r=O;var c=o(t,e,n);if("normal"===c.type){r=n.done?S:E;var h={value:c.arg,done:n.done};if(c.arg!==k)return h;n.delegate&&"next"===i&&(s=g)}else"throw"===c.type&&(r=S,i="throw",s=c.arg)}}}function p(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function l(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function d(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(p,this),this.reset(!0)}function y(t){if(t){var e=t[m];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function o(){for(;++n<t.length;)if(b.call(t,n))return o.value=t[n],o.done=!1,o;return o.value=g,o.done=!0,o};return r.next=r}}return{next:v}}function v(){return{value:g,done:!0}}var g,b=Object.prototype.hasOwnProperty,m="function"==typeof Symbol&&Symbol.iterator||"@@iterator",_="object"==typeof t,w=n.regeneratorRuntime;if(w)return void(_&&(t.exports=w));w=n.regeneratorRuntime=_?t.exports:{},
w.wrap=r;var x="suspendedStart",E="suspendedYield",O="executing",S="completed",k={},j=u.prototype=i.prototype;s.prototype=j.constructor=u,u.constructor=s,s.displayName="GeneratorFunction",w.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===s||"GeneratorFunction"===(e.displayName||e.name))},w.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,u):t.__proto__=u,t.prototype=Object.create(j),t},w.awrap=function(t){return new c(t)},a(h.prototype),w.async=function(t,e,n,o){var i=new h(r(t,e,n,o));return w.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},a(j),j[m]=function(){return this},j.toString=function(){return"[object Generator]"},w.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},w.values=y,d.prototype={constructor:d,reset:function(t){if(this.prev=0,this.next=0,this.sent=g,this.done=!1,this.delegate=null,this.tryEntries.forEach(l),!t)for(var e in this)"t"===e.charAt(0)&&b.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=g)},stop:function(){this.done=!0;var t=this.tryEntries[0],e=t.completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){function e(e,r){return i.type="throw",i.arg=t,n.next=e,!!r}if(this.done)throw t;for(var n=this,r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var s=b.call(o,"catchLoc"),u=b.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&b.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=t,i.arg=e,o?this.next=o.finallyLoc:this.complete(i),k},complete:function(t,e){if("throw"===t.type)throw t.arg;"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=t.arg,this.next="end"):"normal"===t.type&&e&&(this.next=e)},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),l(n),k}},"catch":function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;l(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:y(t),resultName:e,nextLoc:n},k}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(n,function(){return this}())},function(t,n,r){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(t){return b["default"].stringify(t)}function s(t){return b["default"].parse(t)}function u(t){return"function"==typeof t}function a(t){return Array.isArray?Array.isArray(t):"array"==typeof t}function c(t){return null!=t&&"object"===("undefined"==typeof t?"undefined":y(t))&&!a(t)}function h(t){return c(t)===!0&&"[object Object]"===Object.prototype.toString.call(t)}function f(t){var e,n;return h(t)!==!1&&(e=t.constructor,"function"==typeof e&&(n=e.prototype,h(n)!==!1&&n.hasOwnProperty("isPrototypeOf")!==!1))}function p(){return"undefined"!=typeof e}function l(){return"undefined"!=typeof window}function d(t){return new v.Promise(function(e,n){setTimeout(function(){e(null)},t)})}n.__esModule=!0;var y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};n.queryStringify=i,n.parseQueryString=s,n.isFunction=u,n.isArray=a,n.isObject=c,n.isObjectObject=h,n.isPlainObject=f,n.isNodeJS=p,n.isBrowser=l,n.delay=d;var v=r(4),g=r(8),b=o(g)},function(t,e,n){(function(t){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0,e.localStorage=e.PUBNUB=e.Headers=e.Response=e.Request=e.fetch=e.Promise=void 0;var o=n(5),i=r(o),s=n(6),u=r(s),a=n(7),c=r(a),h="undefined"!=typeof window&&window||"undefined"!=typeof t&&t||Function("return this;")(),f=i["default"]&&i["default"].Promise||h.Promise,p=u["default"]?(0,u["default"])({Promise:f}):{},l=p.fetch||h.fetch,d=p.Request||h.Request,y=p.Response||h.Response,v=p.Headers||h.Headers,g=c["default"]||h.PUBNUB,b="undefined"!=typeof h.localStorage?h.localStorage:{};e.Promise=f,e.fetch=l,e.Request=d,e.Response=y,e.Headers=v,e.PUBNUB=g,e.localStorage=b}).call(e,function(){return this}())},function(e,n){e.exports=t},function(t,e){t.exports=n},function(t,e){t.exports=o},function(t,e,n){"use strict";e.decode=e.parse=n(9),e.encode=e.stringify=n(10)},function(t,e){"use strict";function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,r,o){e=e||"&",r=r||"=";var i={};if("string"!=typeof t||0===t.length)return i;var s=/\+/g;t=t.split(e);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var a=t.length;u>0&&a>u&&(a=u);for(var c=0;c<a;++c){var h,f,p,l,d=t[c].replace(s,"%20"),y=d.indexOf(r);y>=0?(h=d.substr(0,y),f=d.substr(y+1)):(h=d,f=""),p=decodeURIComponent(h),l=decodeURIComponent(f),n(i,p)?Array.isArray(i[p])?i[p].push(l):i[p]=[i[p],l]:i[p]=l}return i}},function(t,e){"use strict";var n=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,r,o){return e=e||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map(function(o){var i=encodeURIComponent(n(o))+r;return Array.isArray(t[o])?t[o].map(function(t){return i+encodeURIComponent(n(t))}).join(e):i+encodeURIComponent(n(t[o]))}).join(e):o?encodeURIComponent(n(o))+r+encodeURIComponent(n(t)):""}},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var r=function(){function t(e,r){n(this,t),this.setPrefix(r),this._storage=e}return t.prototype.setPrefix=function(e){return this._prefix=e||t.defaultPrefix,this},t.prototype.setItem=function(t,e){return this._storage[this._prefixKey(t)]=JSON.stringify(e),this},t.prototype.removeItem=function(t){return delete this._storage[this._prefixKey(t)],this},t.prototype.getItem=function(t){var e=this._storage[this._prefixKey(t)];return e?JSON.parse(e):null},t.prototype.clean=function(){for(var t in this._storage)this._storage.hasOwnProperty(t)&&0===t.indexOf(this._prefix)&&delete this._storage[t];return this},t.prototype._prefixKey=function(t){return this._prefix+t},t}();r.defaultPrefix="rc-",e["default"]=r},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function o(t){return"number"==typeof t}function i(t){return"object"==typeof t&&null!==t}function s(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!o(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,o,u,a,c;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(e=arguments[1],e instanceof Error)throw e;var h=new Error('Uncaught, unspecified "error" event. ('+e+")");throw h.context=e,h}if(n=this._events[t],s(n))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:u=Array.prototype.slice.call(arguments,1),n.apply(this,u)}else if(i(n))for(u=Array.prototype.slice.call(arguments,1),c=n.slice(),o=c.length,a=0;a<o;a++)c[a].apply(this,u);return!0},n.prototype.addListener=function(t,e){var o;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(o=s(this._maxListeners)?n.defaultMaxListeners:this._maxListeners,o&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace())),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){function n(){this.removeListener(t,n),o||(o=!0,e.apply(this,arguments))}if(!r(e))throw TypeError("listener must be a function");var o=!1;return n.listener=e,this.on(t,n),this},n.prototype.removeListener=function(t,e){var n,o,s,u;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(n=this._events[t],s=n.length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(u=s;u-- >0;)if(n[u]===e||n[u].listener&&n[u].listener===e){o=u;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[t],r(n))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){var e;return e=this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function r(o,i){try{var s=e[o](i),u=s.value}catch(a){return void n(a)}return s.done?void t(u):Promise.resolve(u).then(function(t){return r("next",t)},function(t){return r("throw",t)})}return r("next")})}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){return t=t.toLowerCase(),Object.keys(e).reduce(function(e,n){return e?e:t==n.toLowerCase()?n:e},null)}e.__esModule=!0,e.findHeaderName=a;var c=n(4),h=n(3),f=n(12),p=r(f),l=n(14),d=r(l),y=function(t){function e(){var n,r,o;i(this,e);for(var u=arguments.length,a=Array(u),c=0;c<u;c++)a[c]=arguments[c];return n=r=s(this,t.call.apply(t,[this].concat(a))),r.events={beforeRequest:"beforeRequest",requestSuccess:"requestSuccess",requestError:"requestError"},o=n,s(r,o)}return u(e,t),e.prototype.sendRequest=function(){function t(t){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(t){var e;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return e=new d["default"](t),n.prev=1,this.emit(this.events.beforeRequest,e),n.next=5,this._loadResponse(t);case 5:return e._response=n.sent,n.next=8,e._init();case 8:if(e.ok()){n.next=10;break}throw new Error("Response has unsuccessful status");case 10:return this.emit(this.events.requestSuccess,e),n.abrupt("return",e);case 14:throw n.prev=14,n.t0=n["catch"](1),n.t0.apiResponse||(n.t0=this.makeError(n.t0,e)),this.emit(this.events.requestError,n.t0),n.t0;case 19:case"end":return n.stop()}},n,this,[[1,14]])}));return t}(),e.prototype._loadResponse=function(){function t(t){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,c.fetch.call(null,t);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}},n,this)}));return t}(),e.prototype.makeError=function(t,e){return t.hasOwnProperty("apiResponse")||t.hasOwnProperty("originalMessage")||(t.apiResponse=e,t.originalMessage=t.message,t.message=e&&e.error(!0)||t.originalMessage),t},e.prototype.createRequest=function(t){if(t=t||{},t.headers=t.headers||{},!t.url)throw new Error("Url is not defined");if(t.method||(t.method="GET"),t.method=t.method.toUpperCase(),t.method&&e._allowedMethods.indexOf(t.method)<0)throw new Error("Method has wrong value: "+t.method);if(t.credentials=t.credentials||"include",t.mode=t.mode||"cors",t.query&&(t.url=t.url+(t.url.indexOf("?")>-1?"&":"?")+(0,h.queryStringify)(t.query)),a("Accept",t.headers)||(t.headers.Accept=d["default"]._jsonContentType),(0,h.isPlainObject)(t.body)||!t.body){var n=a(d["default"]._contentType,t.headers);n||(n=d["default"]._contentType,t.headers[n]=d["default"]._jsonContentType);var r=t.headers[n];r.indexOf(d["default"]._jsonContentType)>-1?"GET"!==t.method&&"HEAD"!==t.method||!t.body?t.body=JSON.stringify(t.body):t.body=void 0:r.indexOf(d["default"]._urlencodedContentType)>-1&&(t.body=(0,h.queryStringify)(t.body))}var o=new c.Request(t.url,t);return o.originalBody=t.body,o},e}(p["default"]);y._allowedMethods=["GET","POST","PUT","DELETE","PATCH","OPTIONS","HEAD"],e["default"]=y},function(t,e,n){"use strict";function r(t){return function(){var e=t.apply(this,arguments);return new i.Promise(function(t,n){function r(o,s){try{var u=e[o](s),a=u.value}catch(c){return void n(c)}return u.done?void t(a):i.Promise.resolve(a).then(function(t){return r("next",t)},function(t){return r("throw",t)})}return r("next")})}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var i=n(4),s=function(){function t(e,n,r){o(this,t),this._request=e,this._response=n,this._text=r,this._json=null,this._multipart=[]}return t.prototype._init=function(){function t(){return e.apply(this,arguments)}var e=r(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!this._isMultipart()&&!this._isJson()){t.next=4;break}return t.next=3,this.response().text();case 3:this._text=t.sent;case 4:return t.abrupt("return",this);case 5:case"end":return t.stop()}},n,this)}));return t}(),t.prototype.response=function(){return this._response},t.prototype.request=function(){return this._request},t.prototype.ok=function(){return this._response&&this._response.ok},t.prototype.text=function(){if(!this._isJson()&&!this._isMultipart())throw new Error("Response is not text");return this._text},t.prototype.json=function(){if(!this._isJson())throw new Error("Response is not JSON");return this._json||(this._json=this._text?JSON.parse(this._text):null),this._json},t.prototype.error=function(t){if(this.ok()&&!t)return null;var e=(this._response&&this._response.status?this._response.status+" ":"")+(this._response&&this._response.statusText?this._response.statusText:"");try{this.json().message&&(e=this.json().message),this.json().error_description&&(e=this.json().error_description),this.json().description&&(e=this.json().description)}catch(n){}return e},t.prototype.multipart=function(){if(!this._isMultipart())throw new Error("Response is not multipart");if(!this._multipart.length){var e=this.text();if(!e)throw new Error("No response body");var n=this._getContentType().match(/boundary=([^;]+)/i)[1];if(!n)throw new Error("Cannot find boundary");var r=e.toString().split(t._boundarySeparator+n);if(""===r[0].trim()&&r.shift(),r[r.length-1].trim()==t._boundarySeparator&&r.pop(),r.length<1)throw new Error("No parts in body");var o=t.create(r.shift(),this._response.status,this._response.statusText).json();this._multipart=r.map(function(e,n){var r=o.response[n].status;return t.create(e,r)})}return this._multipart},t.prototype._isContentType=function(t){return this._getContentType().indexOf(t)>-1},t.prototype._getContentType=function(){return this._response.headers.get(t._contentType)||""},t.prototype._isMultipart=function(){return this._isContentType(t._multipartContentType)},t.prototype._isUrlEncoded=function(){return this._isContentType(t._urlencodedContentType)},t.prototype._isJson=function(){return this._isContentType(t._jsonContentType)},t.create=function(e,n,r){e=e||"",n=n||200,r=r||"OK",e=e.replace(/\r/g,"");var o=new i.Headers,s=e.split(t._bodySeparator),u=s.length>1?s.shift():"";return e=s.length>0?s.join(t._bodySeparator):null,(u||"").split("\n").forEach(function(e){var n=e.trim().split(t._headerSeparator),r=n.shift().trim(),i=n.join(t._headerSeparator).trim();r&&o.append(r,i)}),new t(null,new i.Response(e?e:void 0,{headers:o,status:n,statusText:r}),e)},t}();s._contentType="Content-Type",s._jsonContentType="application/json",s._multipartContentType="multipart/mixed",s._urlencodedContentType="application/x-www-form-urlencoded",s._headerSeparator=":",s._bodySeparator="\n\n",s._boundarySeparator="--",e["default"]=s},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function r(o,i){try{var s=e[o](i),u=s.value}catch(a){return void n(a)}return s.done?void t(u):Promise.resolve(u).then(function(t){return r("next",t)},function(t){return r("throw",t)})}return r("next")})}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.__esModule=!0;var a=n(16),c=r(a),h=n(13),f=r(h),p=function(t){function e(){i(this,e);var n=s(this,t.call(this));return n._registry=new c["default"],n}return u(e,t),e.prototype.registry=function(){return this._registry},e.prototype._loadResponse=function(){function t(t){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(t){var e;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return e=this._registry.find(t),n.next=3,e.getResponse(t);case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}},n,this)}));return t}(),e}(f["default"]);e["default"]=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var i=n(17),s=r(i),u=function(){function t(){o(this,t),this._mocks=[]}return t.prototype.add=function(t){return this._mocks.push(t),this},t.prototype.clear=function(){return this._mocks=[],this},t.prototype.find=function(t){var e=this._mocks.shift();if(!e)throw new Error("No mock in registry for request "+t.method+" "+t.url);if(!e.test(t))throw new Error("Wrong request "+t.method+" "+t.url+" for expected mock "+e.method()+" "+e.path());return e},t.prototype.apiCall=function(t,e,n,r,o,i){return this.add(new s["default"](t,e,n,r,o,i)),this},t.prototype.authentication=function(){return this.apiCall("POST","/restapi/oauth/token",{access_token:"ACCESS_TOKEN",token_type:"bearer",expires_in:3600,refresh_token:"REFRESH_TOKEN",refresh_token_expires_in:60480,scope:"SMS RCM Foo Boo",expireTime:(new Date).getTime()+36e5}),this},t.prototype.logout=function(){return this.apiCall("POST","/restapi/oauth/revoke",{}),this},t.prototype.presenceLoad=function(t){return this.apiCall("GET","/restapi/v1.0/account/~/extension/"+t+"/presence",{uri:"https://platform.ringcentral.com/restapi/v1.0/account/123/extension/"+t+"/presence",extension:{uri:"https://platform.ringcentral.com/restapi/v1.0/account/123/extension/"+t,id:t,extensionNumber:"101"},activeCalls:[],presenceStatus:"Available",telephonyStatus:"Ringing",userStatus:"Available",dndStatus:"TakeAllCalls",extensionId:t}),this},t.prototype.subscribeGeneric=function(t){t=t||54e3;var e=new Date;return this.apiCall("POST","/restapi/v1.0/subscription",{eventFilters:["/restapi/v1.0/account/~/extension/~/presence"],expirationTime:new Date(e.getTime()+1e3*t).toISOString(),expiresIn:t,deliveryMode:{transportType:"PubNub",encryption:!1,address:"123_foo",subscriberKey:"sub-c-foo",secretKey:"sec-c-bar"},id:"foo-bar-baz",creationTime:e.toISOString(),status:"Active",uri:"https://platform.ringcentral.com/restapi/v1.0/subscription/foo-bar-baz"}),this},t.prototype.subscribeOnPresence=function(t,e){t=t||"1";var n=new Date;return this.apiCall("POST","/restapi/v1.0/subscription",{eventFilters:["/restapi/v1.0/account/~/extension/"+t+"/presence"+(e?"?detailedTelephonyState=true":"")],expirationTime:new Date(n.getTime()+54e6).toISOString(),deliveryMode:{transportType:"PubNub",encryption:!0,address:"123_foo",subscriberKey:"sub-c-foo",secretKey:"sec-c-bar",encryptionAlgorithm:"AES",encryptionKey:"VQwb6EVNcQPBhE/JgFZ2zw=="},creationTime:n.toISOString(),id:"foo-bar-baz",status:"Active",uri:"https://platform.ringcentral.com/restapi/v1.0/subscription/foo-bar-baz"}),this},t.prototype.tokenRefresh=function(t){return t?this.apiCall("POST","/restapi/oauth/token",{message:"Wrong token",error_description:"Wrong token",description:"Wrong token"},400):this.apiCall("POST","/restapi/oauth/token",{access_token:"ACCESS_TOKEN_FROM_REFRESH",token_type:"bearer",expires_in:3600,refresh_token:"REFRESH_TOKEN_FROM_REFRESH",refresh_token_expires_in:60480,scope:"SMS RCM Foo Boo"}),this},t}();e["default"]=u},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return function(){var e=t.apply(this,arguments);return new s.Promise(function(t,n){function r(o,i){try{var u=e[o](i),a=u.value}catch(c){return void n(c)}return u.done?void t(a):s.Promise.resolve(a).then(function(t){return r("next",t)},function(t){return r("throw",t)})}return r("next")})}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var s=n(4),u=n(14),a=r(u),c=n(3),h=function(){function t(e,n,r,o,s,u){i(this,t),this._method=e.toUpperCase(),this._path=n,this._json=r||{},this._delay=u||10,this._status=o||200,this._statusText=s||"OK"}return t.prototype.path=function(){return this._path},t.prototype.method=function(){return this._method},t.prototype.test=function(t){return t.url.indexOf(this._path)>-1&&t.method.toUpperCase()==this._method},t.prototype.getResponse=function(){function t(t){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(t){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,c.delay)(this._delay);case 2:return t.abrupt("return",this.createResponse(this._json));case 3:case"end":return t.stop()}},n,this)}));return t}(),t.prototype.createResponse=function(t,e){e=e||{},e.status=e.status||this._status,e.statusText=e.statusText||this._statusText;var n=JSON.stringify(t),r=new s.Response(n,e);return r.headers.set(a["default"]._contentType,a["default"]._jsonContentType),r},t}();e["default"]=h},function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}function i(t){return function(){var e=t.apply(this,arguments);return new c.Promise(function(t,n){function r(o,i){try{var s=e[o](i),u=s.value}catch(a){return void n(a)}return s.done?void t(u):c.Promise.resolve(u).then(function(t){return r("next",t)},function(t){return r("throw",t)})}return r("next")})}}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.__esModule=!0;var c=n(4),h=n(12),f=o(h),p=n(19),l=o(p),d=n(3),y=n(20),v=o(y),g=function(t){function e(n){var r=n.client,o=n.cache,i=n.server,a=n.appKey,c=n.appSecret,h=n.appName,f=n.appVersion,p=n.sdkVersion,d=n.redirectUri;s(this,e);var y=u(this,t.call(this));return y.events={beforeLogin:"beforeLogin",loginSuccess:"loginSuccess",loginError:"loginError",beforeRefresh:"beforeRefresh",refreshSuccess:"refreshSuccess",refreshError:"refreshError",beforeLogout:"beforeLogout",logoutSuccess:"logoutSuccess",logoutError:"logoutError"},y._server=i,y._appKey=a,y._appSecret=c,y._cache=o,y._client=r,y._refreshPromise=null,y._auth=new l["default"](y._cache,e._cacheId),y._userAgent=(h?h+(f?"/"+f:"")+" ":"")+"RCJSSDK/"+p,y._redirectUri=d||"",y}return a(e,t),e.prototype.auth=function(){return this._auth},e.prototype.client=function(){return this._client},e.prototype.createUrl=function(t,n){t=t||"",n=n||{};var r="",o=t.indexOf("http://")!=-1||t.indexOf("https://")!=-1;return n.addServer&&!o&&(r+=this._server),t.indexOf(e._urlPrefix)!=-1||o||(r+=e._urlPrefix+"/"+e._apiVersion),r+=t,(n.addMethod||n.addToken)&&(r+=t.indexOf("?")>-1?"&":"?"),n.addMethod&&(r+="_method="+n.addMethod),n.addToken&&(r+=(n.addMethod?"&":"")+"access_token="+this._auth.accessToken()),r},e.prototype.loginUrl=function(t){return t=t||{},this.createUrl(e._authorizeEndpoint+"?"+(0,d.queryStringify)({response_type:t.implicit?"token":"code",redirect_uri:t.redirectUri||this._redirectUri,client_id:this._appKey,state:t.state||"",brand_id:t.brandId||"",display:t.display||"",prompt:t.prompt||""}),{addServer:!0})},e.prototype.parseLoginRedirect=function(t){function e(t,e){return t.split(e).reverse()[0]}var n=0===t.indexOf("#")&&e(t,"#")||0===t.indexOf("?")&&e(t,"?")||null;if(!n)throw new Error("Unable to parse response");var r=(0,d.parseQueryString)(n);if(!r)throw new Error("Unable to parse response");var o=r.error_description||r.error;if(o){var i=new Error(o);throw i.error=r.error,i}return r},e.prototype.loginWindow=function(t){var e=this;return new c.Promise(function(n,r){if(!(0,d.isBrowser)())throw new Error("This method can be used only in browser");if(!t.url)throw new Error("Missing mandatory URL parameter");t=t||{},t.url=t.url||400,t.width=t.width||400,t.height=t.height||600,t.origin=t.origin||window.location.origin,t.property=t.property||v["default"].authResponseProperty,t.target=t.target||"_blank";var o=void 0!=window.screenLeft?window.screenLeft:screen.left,i=void 0!=window.screenTop?window.screenTop:screen.top,s=window.innerWidth?window.innerWidth:document.documentElement.clientWidth?document.documentElement.clientWidth:screen.width,u=window.innerHeight?window.innerHeight:document.documentElement.clientHeight?document.documentElement.clientHeight:screen.height,a=s/2-t.width/2+o,c=u/2-t.height/2+i,h=window.open(t.url,"_blank","_blank"==t.target?"scrollbars=yes, status=yes, width="+t.width+", height="+t.height+", left="+a+", top="+c:"");window.focus&&h.focus();var f=window.addEventListener?"addEventListener":"attachEvent",p="addEventListener"==f?"removeEventListener":"detachEvent",l="addEventListener"==f?"message":"onmessage",y=function g(o){if(o.origin==t.origin&&o.data&&o.data[t.property]){h.close(),window[p](l,g);try{var i=e.parseLoginRedirect(o.data[t.property]);if(!i.code&&!i.access_token)throw new Error("No authorization code or token");n(i)}catch(o){r(o)}}};window[f](l,y,!1)})},e.prototype.loggedIn=function(){function t(){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.ensureLoggedIn();case 3:return t.abrupt("return",!0);case 6:return t.prev=6,t.t0=t["catch"](0),t.abrupt("return",!1);case 9:case"end":return t.stop()}},n,this,[[0,6]])}));return t}(),e.prototype.login=function(){function t(t){return n.apply(this,arguments)}var n=i(regeneratorRuntime.mark(function r(t){var n,o,i;return regeneratorRuntime.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:if(r.prev=0,t=t||{},this.emit(this.events.beforeLogin),n={},t.code?t.code&&(n.grant_type="authorization_code",n.code=t.code,n.redirect_uri=t.redirectUri||this._redirectUri):(n.grant_type="password",n.username=t.username,n.password=t.password,n.extension=t.extension||""),!t.access_token){r.next=9;break}i=t,r.next=16;break;case 9:return t.endpointId&&(n.endpoint_id=t.endpointId),t.accessTokenTtl&&(n.accessTokenTtl=t.accessTokenTtl),t.refreshTokenTtl&&(n.refreshTokenTtl=t.refreshTokenTtl),r.next=14,this._tokenRequest(e._tokenEndpoint,n);case 14:o=r.sent,i=o.json();case 16:return this._auth.setData(i),this.emit(this.events.loginSuccess,o),r.abrupt("return",o);case 21:throw r.prev=21,r.t0=r["catch"](0),this._cache.clean(),this.emit(this.events.loginError,r.t0),r.t0;case 26:case"end":return r.stop()}},r,this,[[0,21]])}));return t}(),e.prototype._refresh=function(){function t(){return n.apply(this,arguments)}var n=i(regeneratorRuntime.mark(function r(){var t,n;return regeneratorRuntime.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,this.emit(this.events.beforeRefresh),r.next=4,(0,d.delay)(e._refreshDelayMs);case 4:if(this._auth.refreshToken()){r.next=6;break}throw new Error("Refresh token is missing");case 6:if(this._auth.refreshTokenValid()){r.next=8;break}throw new Error("Refresh token has expired");case 8:return r.next=10,this._tokenRequest(e._tokenEndpoint,{grant_type:"refresh_token",refresh_token:this._auth.refreshToken(),access_token_ttl:this._auth.data().expires_in+1,refresh_token_ttl:this._auth.data().refresh_token_expires_in+1});case 10:if(t=r.sent,n=t.json(),n.access_token){r.next=14;break}throw this._client.makeError(new Error("Malformed OAuth response"),t);case 14:return this._auth.setData(n),this.emit(this.events.refreshSuccess,t),r.abrupt("return",t);case 19:throw r.prev=19,r.t0=r["catch"](0),r.t0=this._client.makeError(r.t0),e._clearCacheOnRefreshError&&this._cache.clean(),this.emit(this.events.refreshError,r.t0),r.t0;case 25:case"end":return r.stop()}},r,this,[[0,19]])}));return t}(),e.prototype.refresh=function(){function t(){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(){var t=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._refreshPromise){e.next=2;break}return e.abrupt("return",this._refreshPromise);case 2:return e.prev=2,this._refreshPromise=this._refresh().then(function(e){return t._refreshPromise=null,e}),e.abrupt("return",this._refreshPromise);case 7:throw e.prev=7,e.t0=e["catch"](2),this._refreshPromise=null,e.t0;case 11:case"end":return e.stop()}},n,this,[[2,7]])}));return t}(),e.prototype.logout=function(){function t(){return n.apply(this,arguments)}var n=i(regeneratorRuntime.mark(function r(){var t;return regeneratorRuntime.wrap(function(n){
for(;;)switch(n.prev=n.next){case 0:return n.prev=0,this.emit(this.events.beforeLogout),n.next=4,this._tokenRequest(e._revokeEndpoint,{token:this._auth.accessToken()});case 4:return t=n.sent,this._cache.clean(),this.emit(this.events.logoutSuccess,t),n.abrupt("return",t);case 10:throw n.prev=10,n.t0=n["catch"](0),this.emit(this.events.logoutError,n.t0),n.t0;case 14:case"end":return n.stop()}},r,this,[[0,10]])}));return t}(),e.prototype.inflateRequest=function(){function t(t,n){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(e=e||{},!e.skipAuthCheck){n.next=3;break}return n.abrupt("return",t);case 3:return n.next=5,this.ensureLoggedIn();case 5:return t.headers.set("X-User-Agent",this._userAgent),t.headers.set("Client-Id",this._appKey),t.headers.set("Authorization",this._authHeader()),n.abrupt("return",t);case 9:case"end":return n.stop()}},n,this)}));return t}(),e.prototype.sendRequest=function(){function t(t,n){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,this.inflateRequest(t,e);case 3:return t=n.sent,n.next=6,this._client.sendRequest(t);case 6:return n.abrupt("return",n.sent);case 9:if(n.prev=9,n.t0=n["catch"](0),n.t0.apiResponse&&n.t0.apiResponse.response()&&401==n.t0.apiResponse.response().status&&!e.retry){n.next=13;break}throw n.t0;case 13:return this._auth.cancelAccessToken(),e.retry=!0,n.next=17,this.sendRequest(t,e);case 17:return n.abrupt("return",n.sent);case 18:case"end":return n.stop()}},n,this,[[0,9]])}));return t}(),e.prototype.send=function(){function t(t){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t.url=this.createUrl(t.url,{addServer:!0}),e.next=3,this.sendRequest(this._client.createRequest(t),t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}},n,this)}));return t}(),e.prototype.get=function(){function t(t,n,r){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e,r){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return r=r||{},r.method="GET",r.url=t,r.query=e,n.next=6,this.send(r);case 6:return n.abrupt("return",n.sent);case 7:case"end":return n.stop()}},n,this)}));return t}(),e.prototype.post=function(){function t(t,n,r,o){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e,r,o){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return o=o||{},o.method="POST",o.url=t,o.query=r,o.body=e,n.next=7,this.send(o);case 7:return n.abrupt("return",n.sent);case 8:case"end":return n.stop()}},n,this)}));return t}(),e.prototype.put=function(){function t(t,n,r,o){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e,r,o){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return o=o||{},o.method="PUT",o.url=t,o.query=r,o.body=e,n.next=7,this.send(o);case 7:return n.abrupt("return",n.sent);case 8:case"end":return n.stop()}},n,this)}));return t}(),e.prototype["delete"]=function(){function t(t,n,r){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e,r){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return r=r||{},r.method="DELETE",r.url=t,r.query=e,n.next=6,this.send(r);case 6:return n.abrupt("return",n.sent);case 7:case"end":return n.stop()}},n,this)}));return t}(),e.prototype._tokenRequest=function(){function t(t,n){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(t,e){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.send({url:t,skipAuthCheck:!0,body:e,method:"POST",headers:{Authorization:"Basic "+this._apiKey(),"Content-Type":"application/x-www-form-urlencoded"}});case 2:return n.abrupt("return",n.sent);case 3:case"end":return n.stop()}},n,this)}));return t}(),e.prototype.ensureLoggedIn=function(){function t(){return e.apply(this,arguments)}var e=i(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!this._isAccessTokenValid()){t.next=2;break}return t.abrupt("return",null);case 2:return t.next=4,this.refresh();case 4:return t.abrupt("return",t.sent);case 5:case"end":return t.stop()}},n,this)}));return t}(),e.prototype._isAccessTokenValid=function(){return this._auth.accessTokenValid()},e.prototype._apiKey=function(){var t=this._appKey+":"+this._appSecret;return"function"==typeof btoa?btoa(t):new r(t).toString("base64")},e.prototype._authHeader=function(){var t=this._auth.accessToken();return this._auth.tokenType()+(t?" "+t:"")},e}(f["default"]);g._urlPrefix="/restapi",g._apiVersion="v1.0",g._tokenEndpoint="/restapi/oauth/token",g._revokeEndpoint="/restapi/oauth/revoke",g._authorizeEndpoint="/restapi/oauth/authorize",g._refreshDelayMs=100,g._cacheId="platform",g._clearCacheOnRefreshError=!1,e["default"]=g},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var r=function(){function t(e,r){n(this,t),this._cache=e,this._cacheId=r}return t.prototype.accessToken=function(){return this.data().access_token},t.prototype.refreshToken=function(){return this.data().refresh_token},t.prototype.tokenType=function(){return this.data().token_type},t.prototype.data=function(){return this._cache.getItem(this._cacheId)||{token_type:"",access_token:"",expires_in:0,refresh_token:"",refresh_token_expires_in:0}},t.prototype.setData=function(t){t=t||{};var e=this.data();return Object.keys(t).forEach(function(n){e[n]=t[n]}),e.expire_time=Date.now()+1e3*e.expires_in,e.refresh_token_expire_time=Date.now()+1e3*e.refresh_token_expires_in,this._cache.setItem(this._cacheId,e),this},t.prototype.accessTokenValid=function(){var e=this.data();return e.token_type===t.forcedTokenType||e.expire_time-t.refreshHandicapMs>Date.now()},t.prototype.refreshTokenValid=function(){return this.data().refresh_token_expire_time>Date.now()},t.prototype.cancelAccessToken=function(){return this.setData({access_token:"",expires_in:0})},t.prototype.forceAuthentication=function(){return this.setData({token_type:t.forcedTokenType,access_token:"",expires_in:0,refresh_token:"",refresh_token_expires_in:0}),this},t}();r.refreshHandicapMs=6e4,r.forcedTokenType="forced",e["default"]=r},function(t,e,n){"use strict";e.__esModule=!0,e["default"]={authResponseProperty:"RCAuthorizationResponse",version:"3.0.0-rc2"}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.__esModule=!0;var i=n(22),s=r(i),u=n(4),a=function(){function t(){o(this,t),this.crypto_obj=u.PUBNUB.crypto_obj}return t.prototype.init=function(t){return new s["default"](t)},t}();e["default"]=a},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.__esModule=!0;var u=n(12),a=r(u),c=n(4),h=function(t){function e(n){o(this,e);var r=i(this,t.call(this));return r.options=n,r.crypto_obj=c.PUBNUB.crypto_obj,r}return s(e,t),e.prototype.init=function(t){this.options=t},e.prototype.ready=function(){},e.prototype.subscribe=function(t){this.on("message-"+t.channel,t.message)},e.prototype.unsubscribe=function(t){this.removeAllListeners("message-"+t.channel)},e.prototype.receiveMessage=function(t,e){this.emit("message-"+e,t,"env",e)},e}(a["default"]);e["default"]=h},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function r(o,i){try{var s=e[o](i),u=s.value}catch(a){return void n(a)}return s.done?void t(u):Promise.resolve(u).then(function(t){return r("next",t)},function(t){return r("throw",t)})}return r("next")})}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.__esModule=!0;var a=n(12),c=r(a),h=function(t){function e(n,r){i(this,e);var o=s(this,t.call(this));return o.events={notification:"notification",removeSuccess:"removeSuccess",removeError:"removeError",renewSuccess:"renewSuccess",renewError:"renewError",subscribeSuccess:"subscribeSuccess",subscribeError:"subscribeError"},o._pubnubFactory=n,o._platform=r,o._pubnub=null,o._pubnubLastChannel=null,o._timeout=null,o._subscription=null,o}return u(e,t),e.prototype.subscribed=function(){var t=this.subscription();return!!(t.id&&t.deliveryMode&&t.deliveryMode.subscriberKey&&t.deliveryMode.address)},e.prototype.alive=function(){return this.subscribed()&&Date.now()<this.expirationTime()},e.prototype.expired=function(){return!this.subscribed()||(!this.subscribed()||Date.now()>this.subscription().expirationTime)},e.prototype.expirationTime=function(){return new Date(this.subscription().expirationTime||0).getTime()-e._renewHandicapMs},e.prototype.setSubscription=function(t){return t=t||{},this._clearTimeout(),this._setSubscription(t),this._subscribeAtPubnub(),this._setTimeout(),this},e.prototype.subscription=function(){return this._subscription||{}},e.prototype.register=function(){function t(){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.alive()){t.next=6;break}return t.next=3,this.renew();case 3:return t.abrupt("return",t.sent);case 6:return t.next=8,this.subscribe();case 8:return t.abrupt("return",t.sent);case 9:case"end":return t.stop()}},n,this)}));return t}(),e.prototype.eventFilters=function(){return this.subscription().eventFilters||[]},e.prototype.addEventFilters=function(t){return this.setEventFilters(this.eventFilters().concat(t)),this},e.prototype.setEventFilters=function(t){var e=this.subscription();return e.eventFilters=t,this._setSubscription(e),this},e.prototype.subscribe=function(){function t(){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(){var t,e;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(n.prev=0,this._clearTimeout(),this.eventFilters().length){n.next=4;break}throw new Error("Events are undefined");case 4:return n.next=6,this._platform.post("/subscription",{eventFilters:this._getFullEventFilters(),deliveryMode:{transportType:"PubNub"}});case 6:return t=n.sent,e=t.json(),this.setSubscription(e).emit(this.events.subscribeSuccess,t),n.abrupt("return",t);case 12:throw n.prev=12,n.t0=n["catch"](0),n.t0=this._platform.client().makeError(n.t0),this.reset().emit(this.events.subscribeError,n.t0),n.t0;case 17:case"end":return n.stop()}},n,this,[[0,12]])}));return t}(),e.prototype.renew=function(){function t(){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(){var t,e;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(n.prev=0,this._clearTimeout(),this.subscribed()){n.next=4;break}throw new Error("No subscription");case 4:if(this.eventFilters().length){n.next=6;break}throw new Error("Events are undefined");case 6:return n.next=8,this._platform.put("/subscription/"+this.subscription().id,{eventFilters:this._getFullEventFilters()});case 8:return t=n.sent,e=t.json(),this.setSubscription(e).emit(this.events.renewSuccess,t),n.abrupt("return",t);case 14:throw n.prev=14,n.t0=n["catch"](0),n.t0=this._platform.client().makeError(n.t0),this.reset().emit(this.events.renewError,n.t0),n.t0;case 19:case"end":return n.stop()}},n,this,[[0,14]])}));return t}(),e.prototype.remove=function(){function t(){return e.apply(this,arguments)}var e=o(regeneratorRuntime.mark(function n(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,this.subscribed()){e.next=3;break}throw new Error("No subscription");case 3:return e.next=5,this._platform["delete"]("/subscription/"+this.subscription().id);case 5:return t=e.sent,this.reset().emit(this.events.removeSuccess,t),e.abrupt("return",t);case 10:throw e.prev=10,e.t0=e["catch"](0),e.t0=this._platform.client().makeError(e.t0),this.emit(this.events.removeError,e.t0),e.t0;case 15:case"end":return e.stop()}},n,this,[[0,10]])}));return t}(),e.prototype.resubscribe=function(){var t=this.eventFilters();return this.reset().setEventFilters(t).subscribe()},e.prototype.reset=function(){return this._clearTimeout(),this.subscribed()&&this._pubnub&&this._pubnub.unsubscribe({channel:this.subscription().deliveryMode.address}),this._setSubscription(null),this},e.prototype._setSubscription=function(t){this._subscription=t},e.prototype._getFullEventFilters=function(){var t=this;return this.eventFilters().map(function(e){return t._platform.createUrl(e)})},e.prototype._setTimeout=function(){var t=this;if(this._clearTimeout(),!this.alive())throw new Error("Subscription is not alive");return this._timeout=setInterval(function(){t.alive()||(t.expired()?t.subscribe():t.renew())},e._pollInterval),this},e.prototype._clearTimeout=function(){return clearInterval(this._timeout),this},e.prototype._decrypt=function(t){if(!this.subscribed())throw new Error("No subscription");return this.subscription().deliveryMode.encryptionKey&&(t=this._pubnubFactory.crypto_obj.decrypt(t,this.subscription().deliveryMode.encryptionKey,{encryptKey:!1,keyEncoding:"base64",keyLength:128,mode:"ecb"})),t},e.prototype._notify=function(t){return this.emit(this.events.notification,this._decrypt(t)),this},e.prototype._subscribeAtPubnub=function(){if(!this.alive())throw new Error("Subscription is not alive");var t=this.subscription().deliveryMode;if(this._pubnub){if(this._pubnubLastChannel==t.address)return this;this._pubnubLastChannel&&this._pubnub.unsubscribe({channel:this._pubnubLastChannel}),this._pubnub=this._pubnub.init({ssl:!0,subscribe_key:t.subscriberKey})}else this._pubnub=this._pubnubFactory.init({ssl:!0,subscribe_key:t.subscriberKey}),this._pubnub.ready();return this._pubnubLastChannel=t.address,this._pubnub.subscribe({channel:t.address,message:this._notify.bind(this),connect:function(){}}),this},e}(c["default"]);h._renewHandicapMs=12e4,h._pollInterval=1e4,e["default"]=h},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.__esModule=!0;var u=n(23),a=r(u),c=function(t){function e(n,r,s,u){o(this,e);var a=i(this,t.call(this,n,r));return a._cache=s,a._cacheKey=u,a}return s(e,t),e.prototype.subscription=function(){return this._cache.getItem(this._cacheKey)||{}},e.prototype._setSubscription=function(t){return this._cache.setItem(this._cacheKey,t)},e.prototype.restore=function(t){return this.eventFilters().length||this.setEventFilters(t),this},e}(a["default"]);e["default"]=c}])})}).call(e,n(2),n(60).Buffer)},function(t,e,n){(function(t,r){/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
"use strict";function o(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(e){return!1}}function i(){return t.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,n){if(i()<n)throw new RangeError("Invalid typed array length");return t.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n),e.__proto__=t.prototype):(null===e&&(e=new t(n)),e.length=n),e}function t(e,n,r){if(!(t.TYPED_ARRAY_SUPPORT||this instanceof t))return new t(e,n,r);if("number"==typeof e){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return u(this,e,n,r)}function u(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?l(t,e,n,r):"string"==typeof e?f(t,e,n):d(t,e)}function a(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,e,n,r){return a(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}function h(e,n){if(a(n),e=s(e,n<0?0:0|y(n)),!t.TYPED_ARRAY_SUPPORT)for(var r=0;r<n;++r)e[r]=0;return e}function f(e,n,r){if("string"==typeof r&&""!==r||(r="utf8"),!t.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var o=0|g(n,r);e=s(e,o);var i=e.write(n,r);return i!==o&&(e=e.slice(0,i)),e}function p(t,e){var n=e.length<0?0:0|y(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function l(e,n,r,o){if(n.byteLength,r<0||n.byteLength<r)throw new RangeError("'offset' is out of bounds");if(n.byteLength<r+(o||0))throw new RangeError("'length' is out of bounds");return n=void 0===r&&void 0===o?new Uint8Array(n):void 0===o?new Uint8Array(n,r):new Uint8Array(n,r,o),t.TYPED_ARRAY_SUPPORT?(e=n,e.__proto__=t.prototype):e=p(e,n),e}function d(e,n){if(t.isBuffer(n)){var r=0|y(n.length);return e=s(e,r),0===e.length?e:(n.copy(e,0,0,r),e)}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||X(n.length)?s(e,0):p(e,n);if("Buffer"===n.type&&Q(n.data))return p(e,n.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function y(t){if(t>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|t}function v(e){return+e!=e&&(e=0),t.alloc(+e)}function g(e,n){if(t.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var o=!1;;)switch(n){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return G(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return J(e).length;default:if(o)return G(e).length;n=(""+n).toLowerCase(),o=!0}}function b(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if(n>>>=0,e>>>=0,n<=e)return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,n);case"utf8":case"utf-8":return T(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return M(this,e,n);case"base64":return P(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function _(e,n,r,o,i){if(0===e.length)return-1;if("string"==typeof r?(o=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof n&&(n=t.from(n,o)),t.isBuffer(n))return 0===n.length?-1:w(e,n,r,o,i);if("number"==typeof n)return n=255&n,t.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,n,r):Uint8Array.prototype.lastIndexOf.call(e,n,r):w(e,[n],r,o,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,n,r,o){function i(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}var s=1,u=t.length,a=e.length;if(void 0!==r&&(r=String(r).toLowerCase(),"ucs2"===r||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,u/=2,a/=2,n/=2}var c;if(o){var h=-1;for(c=n;c<u;c++)if(i(t,c)===i(e,h===-1?0:c-h)){if(h===-1&&(h=c),c-h+1===a)return h*s}else h!==-1&&(c-=c-h),h=-1}else for(n+a>u&&(n=u-a),c=n;c>=0;c--){for(var f=!0,p=0;p<a;p++)if(i(t,c+p)!==i(e,p)){f=!1;break}if(f)return c}return-1}function x(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var i=e.length;if(i%2!==0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var u=parseInt(e.substr(2*s,2),16);if(isNaN(u))return s;t[n+s]=u}return s}function E(t,e,n,r){return W(G(e,t.length-n),t,n,r)}function O(t,e,n,r){return W(Y(e),t,n,r)}function S(t,e,n,r){return O(t,e,n,r)}function k(t,e,n,r){return W(J(e),t,n,r)}function j(t,e,n,r){return W(V(e,t.length-n),t,n,r)}function P(t,e,n){return 0===e&&n===t.length?$.fromByteArray(t):$.fromByteArray(t.slice(e,n))}function T(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i=t[o],s=null,u=i>239?4:i>223?3:i>191?2:1;if(o+u<=n){var a,c,h,f;switch(u){case 1:i<128&&(s=i);break;case 2:a=t[o+1],128===(192&a)&&(f=(31&i)<<6|63&a,f>127&&(s=f));break;case 3:a=t[o+1],c=t[o+2],128===(192&a)&&128===(192&c)&&(f=(15&i)<<12|(63&a)<<6|63&c,f>2047&&(f<55296||f>57343)&&(s=f));break;case 4:a=t[o+1],c=t[o+2],h=t[o+3],128===(192&a)&&128===(192&c)&&128===(192&h)&&(f=(15&i)<<18|(63&a)<<12|(63&c)<<6|63&h,f>65535&&f<1114112&&(s=f))}}null===s?(s=65533,u=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),o+=u}return R(r)}function R(t){var e=t.length;if(e<=tt)return String.fromCharCode.apply(String,t);for(var n="",r=0;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=tt));return n}function A(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function M(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function C(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=K(t[i]);return o}function B(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function L(t,e,n){if(t%1!==0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,n,r,o,i,s){if(!t.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>i||n<s)throw new RangeError('"value" argument is out of bounds');if(r+o>e.length)throw new RangeError("Index out of range")}function U(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function q(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function I(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(t,e,n,r,o){return o||I(t,e,n,4,3.4028234663852886e38,-3.4028234663852886e38),Z.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,o){return o||I(t,e,n,8,1.7976931348623157e308,-1.7976931348623157e308),Z.write(t,e,n,r,52,8),n+8}function z(t){if(t=H(t).replace(et,""),t.length<2)return"";for(;t.length%4!==0;)t+="=";return t}function H(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function K(t){return t<16?"0"+t.toString(16):t.toString(16)}function G(t,e){e=e||1/0;for(var n,r=t.length,o=null,i=[],s=0;s<r;++s){if(n=t.charCodeAt(s),n>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=(o-55296<<10|n-56320)+65536}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function Y(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}function V(t,e){for(var n,r,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}function J(t){return $.toByteArray(z(t))}function W(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}function X(t){return t!==t}var $=n(61),Z=n(62),Q=n(63);e.Buffer=t,e.SlowBuffer=v,e.INSPECT_MAX_BYTES=50,t.TYPED_ARRAY_SUPPORT=void 0!==r.TYPED_ARRAY_SUPPORT?r.TYPED_ARRAY_SUPPORT:o(),e.kMaxLength=i(),t.poolSize=8192,t._augment=function(e){return e.__proto__=t.prototype,e},t.from=function(t,e,n){return u(null,t,e,n)},t.TYPED_ARRAY_SUPPORT&&(t.prototype.__proto__=Uint8Array.prototype,t.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&t[Symbol.species]===t&&Object.defineProperty(t,Symbol.species,{value:null,configurable:!0})),t.alloc=function(t,e,n){return c(null,t,e,n)},t.allocUnsafe=function(t){return h(null,t)},t.allocUnsafeSlow=function(t){return h(null,t)},t.isBuffer=function(t){return!(null==t||!t._isBuffer)},t.compare=function(e,n){if(!t.isBuffer(e)||!t.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var r=e.length,o=n.length,i=0,s=Math.min(r,o);i<s;++i)if(e[i]!==n[i]){r=e[i],o=n[i];break}return r<o?-1:o<r?1:0},t.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},t.concat=function(e,n){if(!Q(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return t.alloc(0);var r;if(void 0===n)for(n=0,r=0;r<e.length;++r)n+=e[r].length;var o=t.allocUnsafe(n),i=0;for(r=0;r<e.length;++r){var s=e[r];if(!t.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(o,i),i+=s.length}return o},t.byteLength=g,t.prototype._isBuffer=!0,t.prototype.swap16=function(){var t=this.length;if(t%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},t.prototype.swap32=function(){var t=this.length;if(t%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},t.prototype.swap64=function(){var t=this.length;if(t%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},t.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):b.apply(this,arguments)},t.prototype.equals=function(e){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===t.compare(this,e)},t.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},t.prototype.compare=function(e,n,r,o,i){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===r&&(r=e?e.length:0),void 0===o&&(o=0),void 0===i&&(i=this.length),n<0||r>e.length||o<0||i>this.length)throw new RangeError("out of range index");if(o>=i&&n>=r)return 0;if(o>=i)return-1;if(n>=r)return 1;if(n>>>=0,r>>>=0,o>>>=0,i>>>=0,this===e)return 0;for(var s=i-o,u=r-n,a=Math.min(s,u),c=this.slice(o,i),h=e.slice(n,r),f=0;f<a;++f)if(c[f]!==h[f]){s=c[f],u=h[f];break}return s<u?-1:u<s?1:0},t.prototype.includes=function(t,e,n){return this.indexOf(t,e,n)!==-1},t.prototype.indexOf=function(t,e,n){return _(this,t,e,n,!0)},t.prototype.lastIndexOf=function(t,e,n){return _(this,t,e,n,!1)},t.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e=0|e,isFinite(n)?(n=0|n,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return x(this,t,e,n);case"utf8":case"utf-8":return E(this,t,e,n);case"ascii":return O(this,t,e,n);case"latin1":case"binary":return S(this,t,e,n);case"base64":return k(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return j(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},t.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var tt=4096;t.prototype.slice=function(e,n){var r=this.length;e=~~e,n=void 0===n?r:~~n,e<0?(e+=r,e<0&&(e=0)):e>r&&(e=r),n<0?(n+=r,n<0&&(n=0)):n>r&&(n=r),n<e&&(n=e);var o;if(t.TYPED_ARRAY_SUPPORT)o=this.subarray(e,n),o.__proto__=t.prototype;else{var i=n-e;o=new t(i,(void 0));for(var s=0;s<i;++s)o[s]=this[s+e]}return o},t.prototype.readUIntLE=function(t,e,n){t=0|t,e=0|e,n||L(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},t.prototype.readUIntBE=function(t,e,n){t=0|t,e=0|e,n||L(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},t.prototype.readUInt8=function(t,e){return e||L(t,1,this.length),this[t]},t.prototype.readUInt16LE=function(t,e){return e||L(t,2,this.length),this[t]|this[t+1]<<8},t.prototype.readUInt16BE=function(t,e){return e||L(t,2,this.length),this[t]<<8|this[t+1]},t.prototype.readUInt32LE=function(t,e){return e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},t.prototype.readUInt32BE=function(t,e){return e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},t.prototype.readIntLE=function(t,e,n){t=0|t,e=0|e,n||L(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*e)),r},t.prototype.readIntBE=function(t,e,n){t=0|t,e=0|e,n||L(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*e)),i},t.prototype.readInt8=function(t,e){return e||L(t,1,this.length),128&this[t]?(255-this[t]+1)*-1:this[t]},t.prototype.readInt16LE=function(t,e){e||L(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},t.prototype.readInt16BE=function(t,e){e||L(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},t.prototype.readInt32LE=function(t,e){return e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},t.prototype.readInt32BE=function(t,e){return e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},t.prototype.readFloatLE=function(t,e){return e||L(t,4,this.length),Z.read(this,t,!0,23,4)},t.prototype.readFloatBE=function(t,e){return e||L(t,4,this.length),Z.read(this,t,!1,23,4)},t.prototype.readDoubleLE=function(t,e){return e||L(t,8,this.length),Z.read(this,t,!0,52,8)},t.prototype.readDoubleBE=function(t,e){return e||L(t,8,this.length),Z.read(this,t,!1,52,8)},t.prototype.writeUIntLE=function(t,e,n,r){if(t=+t,e=0|e,n=0|n,!r){var o=Math.pow(2,8*n)-1;N(this,t,e,n,o,0)}var i=1,s=0;for(this[e]=255&t;++s<n&&(i*=256);)this[e+s]=t/i&255;return e+n},t.prototype.writeUIntBE=function(t,e,n,r){if(t=+t,e=0|e,n=0|n,!r){var o=Math.pow(2,8*n)-1;N(this,t,e,n,o,0)}var i=n-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+n},t.prototype.writeUInt8=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,1,255,0),t.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},t.prototype.writeUInt16LE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,2,65535,0),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):U(this,e,n,!0),n+2},t.prototype.writeUInt16BE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,2,65535,0),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):U(this,e,n,!1),n+2},t.prototype.writeUInt32LE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,4,4294967295,0),t.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):q(this,e,n,!0),n+4},t.prototype.writeUInt32BE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,4,4294967295,0),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):q(this,e,n,!1),n+4},t.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e=0|e,!r){var o=Math.pow(2,8*n-1);N(this,t,e,n,o-1,-o)}var i=0,s=1,u=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===u&&0!==this[e+i-1]&&(u=1),this[e+i]=(t/s>>0)-u&255;return e+n},t.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e=0|e,!r){var o=Math.pow(2,8*n-1);N(this,t,e,n,o-1,-o)}var i=n-1,s=1,u=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===u&&0!==this[e+i+1]&&(u=1),this[e+i]=(t/s>>0)-u&255;return e+n},t.prototype.writeInt8=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,1,127,-128),t.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},t.prototype.writeInt16LE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,2,32767,-32768),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):U(this,e,n,!0),n+2},t.prototype.writeInt16BE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,2,32767,-32768),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):U(this,e,n,!1),n+2},t.prototype.writeInt32LE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,4,2147483647,-2147483648),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):q(this,e,n,!0),n+4},t.prototype.writeInt32BE=function(e,n,r){return e=+e,n=0|n,r||N(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):q(this,e,n,!1),n+4},t.prototype.writeFloatLE=function(t,e,n){return D(this,t,e,!0,n)},t.prototype.writeFloatBE=function(t,e,n){return D(this,t,e,!1,n)},t.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},t.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},t.prototype.copy=function(e,n,r,o){if(r||(r=0),o||0===o||(o=this.length),n>=e.length&&(n=e.length),n||(n=0),o>0&&o<r&&(o=r),o===r)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),e.length-n<o-r&&(o=e.length-n+r);var i,s=o-r;if(this===e&&r<n&&n<o)for(i=s-1;i>=0;--i)e[i+n]=this[i+r];else if(s<1e3||!t.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)e[i+n]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+s),n);return s},t.prototype.fill=function(e,n,r,o){if("string"==typeof e){if("string"==typeof n?(o=n,n=0,r=this.length):"string"==typeof r&&(o=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!t.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof e&&(e=255&e);if(n<0||this.length<n||this.length<r)throw new RangeError("Out of range index");if(r<=n)return this;n>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var s;if("number"==typeof e)for(s=n;s<r;++s)this[s]=e;else{var u=t.isBuffer(e)?e:G(new t(e,o).toString()),a=u.length;for(s=0;s<r-n;++s)this[s+n]=u[s%a]}return this};var et=/[^+\/0-9A-Za-z-_]/g}).call(e,n(60).Buffer,function(){return this}())},function(t,e){"use strict";function n(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function r(t){return 3*t.length/4-n(t)}function o(t){var e,r,o,i,s,u,a=t.length;s=n(t),u=new h(3*a/4-s),o=s>0?a-4:a;var f=0;for(e=0,r=0;e<o;e+=4,r+=3)i=c[t.charCodeAt(e)]<<18|c[t.charCodeAt(e+1)]<<12|c[t.charCodeAt(e+2)]<<6|c[t.charCodeAt(e+3)],u[f++]=i>>16&255,u[f++]=i>>8&255,u[f++]=255&i;return 2===s?(i=c[t.charCodeAt(e)]<<2|c[t.charCodeAt(e+1)]>>4,u[f++]=255&i):1===s&&(i=c[t.charCodeAt(e)]<<10|c[t.charCodeAt(e+1)]<<4|c[t.charCodeAt(e+2)]>>2,u[f++]=i>>8&255,u[f++]=255&i),u}function i(t){return a[t>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}function s(t,e,n){for(var r,o=[],s=e;s<n;s+=3)r=(t[s]<<16)+(t[s+1]<<8)+t[s+2],o.push(i(r));return o.join("")}function u(t){for(var e,n=t.length,r=n%3,o="",i=[],u=16383,c=0,h=n-r;c<h;c+=u)i.push(s(t,c,c+u>h?h:c+u));return 1===r?(e=t[n-1],o+=a[e>>2],o+=a[e<<4&63],o+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],o+=a[e>>10],o+=a[e>>4&63],o+=a[e<<2&63],o+="="),i.push(o),i.join("")}e.byteLength=r,e.toByteArray=o,e.fromByteArray=u;for(var a=[],c=[],h="undefined"!=typeof Uint8Array?Uint8Array:Array,f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",p=0,l=f.length;p<l;++p)a[p]=f[p],c[f.charCodeAt(p)]=p;c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,s,u=8*o-r-1,a=(1<<u)-1,c=a>>1,h=-7,f=n?o-1:0,p=n?-1:1,l=t[e+f];for(f+=p,i=l&(1<<-h)-1,l>>=-h,h+=u;h>0;i=256*i+t[e+f],f+=p,h-=8);for(s=i&(1<<-h)-1,i>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=p,h-=8);if(0===i)i=1-c;else{if(i===a)return s?NaN:(l?-1:1)*(1/0);s+=Math.pow(2,r),i-=c}return(l?-1:1)*s*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var s,u,a,c=8*i-o-1,h=(1<<c)-1,f=h>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,l=r?0:i-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-s))<1&&(s--,a*=2),e+=s+f>=1?p/a:p*Math.pow(2,1-f),e*a>=2&&(s++,a/=2),s+f>=h?(u=0,s=h):s+f>=1?(u=(e*a-1)*Math.pow(2,o),s+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;t[n+l]=255&u,l+=d,u/=256,o-=8);for(s=s<<o|u,c+=o;c>0;t[n+l]=255&s,l+=d,s/=256,c-=8);t[n+l-d]|=128*y}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){var r;!function(){"use strict";function o(t){var e=t&&t.Promise||self.Promise,n=t&&t.XMLHttpRequest||self.XMLHttpRequest,r=self;return function(){var t=Object.create(r,{fetch:{value:void 0,writable:!0}});return function(t){function r(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function o(t){return"string"!=typeof t&&(t=String(t)),t}function i(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return g.iterable&&(e[Symbol.iterator]=function(){return e}),e}function s(t){this.map={},t instanceof s?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function u(t){return t.bodyUsed?e.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function a(t){return new e(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function c(t){var e=new FileReader;return e.readAsArrayBuffer(t),a(e)}function h(t){var e=new FileReader;return e.readAsText(t),a(e)}function f(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(g.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(g.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(t){if(!g.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):g.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},g.blob?(this.blob=function(){var t=u(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(c)},this.text=function(){var t=u(this);if(t)return t;if(this._bodyBlob)return h(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)}):this.text=function(){var t=u(this);return t?t:e.resolve(this._bodyText)},g.formData&&(this.formData=function(){return this.text().then(d)}),this.json=function(){return this.text().then(JSON.parse)},this}function p(t){var e=t.toUpperCase();return b.indexOf(e)>-1?e:t}function l(t,e){e=e||{};var n=e.body;if(l.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new s(t.headers)),this.method=t.method,this.mode=t.mode,n||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new s(e.headers)),this.method=p(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function d(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}}),e}function y(t){var e=new s,n=(t.getAllResponseHeaders()||"").trim().split("\n");return n.forEach(function(t){var n=t.trim().split(":"),r=n.shift().trim(),o=n.join(":").trim();e.append(r,o)}),e}function v(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof s?e.headers:new s(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var g={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};s.prototype.append=function(t,e){t=r(t),e=o(e);var n=this.map[t];n||(n=[],this.map[t]=n),n.push(e)},s.prototype["delete"]=function(t){delete this.map[r(t)]},s.prototype.get=function(t){var e=this.map[r(t)];return e?e[0]:null},s.prototype.getAll=function(t){return this.map[r(t)]||[]},s.prototype.has=function(t){return this.map.hasOwnProperty(r(t))},s.prototype.set=function(t,e){this.map[r(t)]=[o(e)]},s.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){t.call(e,r,n,this)},this)},this)},s.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),i(t)},s.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),i(t)},s.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),i(t)},g.iterable&&(s.prototype[Symbol.iterator]=s.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];l.prototype.clone=function(){return new l(this)},f.call(l.prototype),f.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new s(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var m=[301,302,303,307,308];v.redirect=function(t,e){if(m.indexOf(e)===-1)throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})},t.Headers=s,t.Request=l,t.Response=v,t.fetch=function(t,r){return new e(function(e,o){function i(){return"responseURL"in u?u.responseURL:/^X-Request-URL:/m.test(u.getAllResponseHeaders())?u.getResponseHeader("X-Request-URL"):void 0}var s;s=l.prototype.isPrototypeOf(t)&&!r?t:new l(t,r);var u=new n;u.onload=function(){var t={status:u.status,statusText:u.statusText,headers:y(u),url:i()},n="response"in u?u.response:u.responseText;e(new v(n,t))},u.onerror=function(){o(new TypeError("Network request failed"))},u.ontimeout=function(){o(new TypeError("Network request failed"))},u.open(s.method,s.url,!0),"include"===s.credentials&&(u.withCredentials=!0),"responseType"in u&&g.blob&&(u.responseType="blob"),s.headers.forEach(function(t,e){u.setRequestHeader(e,t)}),u.send("undefined"==typeof s._bodyInit?null:s._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof t?t:this),{fetch:t.fetch,Headers:t.Headers,Request:t.Request,Response:t.Response}}()}r=function(){return o}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}()},function(t,e,n){/*! 3.16.3 / modern */
!function(e,n){t.exports=n()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){function r(t){var e,n,r=0,o=0,i=!0,s=t.timeout||l.DEF_TIMEOUT,u=t.data||{},a=t.fail||function(){},c=t.success||function(){},h=function(t,o){r||(r=1,clearTimeout(n),e&&(e.onerror=e.onload=null,e.abort&&e.abort(),e=null),t&&a(o))},f=function(){if(!o){var t;o=1,clearTimeout(n);try{t=JSON.parse(e.responseText)}catch(r){return h(1)}c(t)}};n=l.timeout(function(){h(1)},s);try{e="undefined"!=typeof XDomainRequest&&new XDomainRequest||new XMLHttpRequest,e.onerror=e.onabort=function(){h(1,e.responseText||{error:"Network Connection Error"})},e.onload=e.onloadend=f;var p=l.build_url(t.url,u);e.open("GET",p,i),i&&(e.timeout=s),e.send()}catch(d){h(1,{error:"XHR Failed",stacktrace:d})}return h}function o(t,e,n){l.each(t.split(","),function(t){var r=function(t){t||(t=window.event),n(t)||(t.cancelBubble=!0,t.returnValue=!1,t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation())};e.addEventListener?e.addEventListener(t,r,!1):e.attachEvent?e.attachEvent("on"+t,r):e["on"+t]=r})}function i(t){console.error(t)}function s(t,e,n){return n?void t.setAttribute(e,n):t&&t.getAttribute&&t.getAttribute(e)}function u(t){return document.getElementById(t)}function a(t,e){var n=[];return l.each(t.split(/\s+/),function(t){l.each((e||document).getElementsByTagName(t),function(t){n.push(t)})}),n}function c(t,e){for(var n in e)if(e.hasOwnProperty(n))try{t.style[n]=e[n]+("|width|height|top|left|".indexOf(n)>0&&"number"==typeof e[n]?"px":"")}catch(r){return}}function h(t){return document.createElement(t)}function f(t,e){var n=y.HmacSHA256(t,e);return n.toString(y.enc.Base64)}function p(t){t.db=g,t.xdr=r,t.error=t.error||i,t.hmac_SHA256=f,t.crypto_obj=d(),t.WS=v,t.sdk_family="Modern";var e=function(t){return p(t)},n=l.PN_API(t);for(var y in n)n.hasOwnProperty(y)&&(e[y]=n[y]);return e.init=e,e.$=u,e.attr=s,e.search=a,e.bind=o,e.css=c,e.create=h,e.crypto_obj=d(),e.WS=v,e.PNmessage=l.PNmessage,e.supplant=l.supplant,"undefined"!=typeof window&&o("beforeunload",window,function(){return e["each-channel"](function(t){e.LEAVE(t.name,1)}),!0}),e.ready(),t.notest?e:("undefined"!=typeof window&&o("offline",window,e.offline),"undefined"!=typeof document&&o("offline",document,e.offline),e)}var l=n(1),d=n(5),y=n(6),v=n(7),g=function(){var t;try{t="undefined"!=typeof localStorage&&localStorage}catch(e){t={_data:{},setItem:function(t,e){this._data[t]=String(e)},getItem:function(t){return this._data.hasOwnProperty(t)?this._data[t]:void 0},removeItem:function(t){return delete this._data[t]},clear:function(){this._data={}}}}return{get:function(e){try{return t?t.getItem(e):document.cookie.indexOf(e)===-1?null:((document.cookie||"").match(RegExp(e+"=([^;]+)"))||[])[1]||null}catch(n){return}},set:function(e,n){try{if(t)return t.setItem(e,n)&&0;document.cookie=e+"="+n+"; expires=Thu, 1 Aug 2030 20:00:00 UTC; path=/"}catch(r){return}}}}(),b={list:{},unbind:function(t){b.list[t]=[]},bind:function(t,e){(b.list[t]=b.list[t]||[]).push(e)},fire:function(t,e){l.each(b.list[t]||[],function(t){t(e)})}};p.init=p,p.secure=p,p.crypto_obj=d(),p.WS=v,p.db=g,p.PNmessage=l.PNmessage,p.uuid=l.uuid,p.css=c,p.$=u,p.create=u,p.bind=o,p.search=a,p.attr=s,p.events=b,p.map=l.map,p.each=l.each,p.grep=l.grep,p.supplant=l.supplant,p.now=l.now,p.unique=l.unique,p.updater=l.updater,t.exports=p},function(t,e,n){function r(){return"x"+ ++p+ +new Date}function o(t,e){var n=[];return f.each(t,function(t,r){e?t.search("-pnpres")<0&&r.subscribed&&n.push(t):r.subscribed&&n.push(t)}),n.sort()}function i(t,e){var n=[];return f.each(t,function(t,r){e?t.search("-pnpres")<0&&r.subscribed&&n.push(t):r.subscribed&&n.push(t)}),n.sort()}function s(){l||(l=1,f.each(d,function(t){t()}))}function u(t){var e=t||{apns:{}};return e.getPubnubMessage=function(){var t={};if(Object.keys(e.apns).length){t.pn_apns={aps:{alert:e.apns.alert,badge:e.apns.badge,sound:e.apns.sound}};for(var n in e.apns)t.pn_apns[n]=e.apns[n];var r=["badge","alert","sound"];for(var n in r)delete t.pn_apns[r[n]]}e.gcm&&(t.pn_gcm={data:e.gcm});for(var n in e)t[n]=e[n];var o=["apns","gcm","publish","channel","callback","error"];for(var n in o)delete t[o[n]];return t},e.publish=function(){var t=e.getPubnubMessage();e.pubnub&&e.channel&&e.pubnub.publish({message:t,channel:e.channel,callback:e.callback,error:e.error})},e}function a(t){function e(){var t="PubNub-JS-"+Rt;return Tt&&(t+="-"+Tt),t+="/"+E}function n(t){return t||(t={}),f.each(wt,function(e,n){e in t||(t[e]=n)}),t.pnsdk=e(),t}function u(t){var e=[];return f.each(t,function(t,n){e.push(t)}),e}function a(t){return u(t).sort()}function c(t){var e="",n=a(t);for(var r in n){var o=n[r];e+=o+"="+f.pamEncode(t[o]),r!=n.length-1&&(e+="&")}return e}function h(t,e,n){var r=!1;if("undefined"==typeof t)return e;if("number"==typeof t)r=!(t>w||0==t);else{if("boolean"==typeof t)return t?x:0;r=!0}return r?(n&&n("Presence Heartbeat value invalid. Valid range ( x > "+w+" or x = 0). Current Value : "+(e||w)),e||w):t}function p(t,e){return Lt.encrypt(t,e||kt)||t}function g(t,e){return Lt.decrypt(t,e||kt)||Lt.decrypt(t,kt)||t}function S(){return clearTimeout(dt),!vt||vt>=500||vt<1||!o(ft,!0).length&&!i(pt,!0).length?void(gt=!1):(gt=!0,void Nt.presence_heartbeat({callback:function(t){dt=f.timeout(S,vt*_)},error:function(t){xt&&xt("Presence Heartbeat unable to reach Pubnub servers."+JSON.stringify(t)),dt=f.timeout(S,vt*_)}}))}function k(){!gt&&S()}function j(t){if(bt){if(!nt.length)return}else{if(t&&(nt.sending=0),nt.sending||!nt.length)return;nt.sending=1}M(nt.shift())}function P(t){var e=0;return f.each(i(pt),function(n){var r=pt[n];r&&(e++,(t||function(){})(r))}),e}function T(t){var e=0;return f.each(o(ft),function(n){var r=ft[n];r&&(e++,(t||function(){})(r))}),e}function R(t,e,n){if("object"==typeof t){if(t.error){var r={};return t.message&&(r.message=t.message),t.payload&&(r.payload=t.payload),void(n&&n(r))}if(t.payload)return void(t.next_page?e&&e(t.payload,t.next_page):e&&e(t.payload))}e&&e(t)}function A(t,e){if("object"==typeof t&&t.error){var n={};return t.message&&(n.message=t.message),t.payload&&(n.payload=t.payload),void(e&&e(n))}e&&e(t)}function M(t){var e=t.operation,n=Math.floor((new Date).getTime()/1e3),r=t.data||{};if(W){r.auth||delete r.auth,r.timestamp=n;var o=V+"\n"+Y+"\n";if("PNAccessManagerGrant"===e)o+="grant\n";else if("PNAccessManagerAudit"===e)o+="audit\n";else{var i=t.url.slice();i.shift(),o+="/"+i.join("/")+"\n"}o+=c(r);var s=X(o,W);s=s.replace(/\+/g,"-"),s=s.replace(/\//g,"_"),r.signature=s,t.data=r}return _t(t)}function C(t,e,r,o){var e=t.callback||e,i=t.error||xt,s=Ot();o=o||{},o.auth||(o.auth=t.auth_key||J);var u=[Q,"v1","channel-registration","sub-key",V];u.push.apply(u,r),s&&(o.callback=s),M({callback:s,data:n(o),success:function(t){R(t,e,i)},fail:function(t){A(t,i)},url:u})}function B(){Et()||N(1,{error:"Offline. Please check your network settings."}),I&&clearTimeout(I),I=f.timeout(B,_)}function L(){K&&Nt.time(function(t){q(function(){},t),t||N(1,{error:"Heartbeat failed to connect to Pubnub Servers.Please check your network settings."}),D&&clearTimeout(D),D=f.timeout(L,H)})}function N(t,e){ut&&ut(t,e),ut=null,clearTimeout(I),clearTimeout(D)}function U(t){var e=f.rnow()-ot;return e-t/1e4}function q(t,e){function n(e){if(e){var n=e/1e4,o=(f.rnow()-r)/2;ot=f.rnow()-(n+o),t&&t(ot)}}var r=f.rnow();e&&n(e)||Nt.time(n)}var I,D,F=+t.windowing||v,z=(+t.timeout||b)*_,H=(+t.keepalive||m)*_,K=t.timecheck||0,G=t.noleave||0,Y=t.publish_key,V=t.subscribe_key,J=t.auth_key||"",W=t.secret_key||"",X=t.hmac_SHA256,$=t.ssl?"s":"",Z="http"+$+"://"+(t.origin||"pubsub.pubnub.com"),Q=O(Z),tt=O(Z),et=function(){},nt=[],rt=!0,ot=0,it=0,st=0,ut=0,at=t.restore||0,ct=0,ht=!1,ft={},pt={},lt={},dt=null,yt=h(t.heartbeat||t.pnexpires||0,t.error),vt=t.heartbeat_interval||yt/2-1,gt=!1,bt=t.no_wait_for_pending,mt=t["compatible_3.5"]||!1,_t=t.xdr,wt=t.params||{},xt=t.error||function(){},Et=t._is_online||function(){return 1},Ot=t.jsonp_cb||function(){return 0},St=t.db||{get:function(){},set:function(){}},kt=t.cipher_key,jt=t.uuid||!t.unique_uuid&&St&&St.get(V+"uuid")||"",Pt=t.instance_id||!1,Tt=t.partner_id,Rt=t.sdk_family,At="",Mt=t.shutdown,Ct="undefined"==typeof t.use_send_beacon||t.use_send_beacon,Bt=Ct?t.sendBeacon:null;2===yt&&(vt=1);var Lt=t.crypto_obj||{encrypt:function(t,e){return t},decrypt:function(t,e){return t}},Nt={LEAVE:function(t,e,r,o,i){var s,u,a={uuid:jt,auth:r||J},c=O(Z),o=o||function(){},h=i||function(){},p=Ot();if(t.indexOf(y)>0)return!0;if(mt){if(!$)return!1;if("0"==p)return!1}if(G)return!1;if("0"!=p&&(a.callback=p),Pt&&(a.instanceid=At),s=[c,"v2","presence","sub_key",V,"channel",f.encode(t),"leave"],u=n(a),Bt){var l=f.buildURL(s,u);if(Bt(l))return o&&o({status:200,action:"leave",message:"OK",service:"Presence"}),!0}return M({blocking:e||$,callback:p,data:u,success:function(t){R(t,o,h)},fail:function(t){A(t,h)},url:s}),!0},LEAVE_GROUP:function(t,e,r,o,i){var s,u,a={uuid:jt,auth:r||J},c=O(Z),o=o||function(){},h=i||function(){},p=Ot();if(t.indexOf(y)>0)return!0;if(mt){if(!$)return!1;if("0"==p)return!1}if(G)return!1;if("0"!=p&&(a.callback=p),t&&t.length>0&&(a["channel-group"]=t),Pt&&(a.instanceid=At),s=[c,"v2","presence","sub_key",V,"channel",f.encode(","),"leave"],u=n(a),Bt){var l=f.buildURL(s,u);if(Bt(l))return o&&o({status:200,action:"leave",message:"OK",service:"Presence"}),!0}return M({blocking:e||$,callback:p,data:u,success:function(t){R(t,o,h)},fail:function(t){A(t,h)},url:s}),!0},set_resumed:function(t){ht=t},get_cipher_key:function(){return kt},set_cipher_key:function(t){kt=t},raw_encrypt:function(t,e){return p(t,e)},raw_decrypt:function(t,e){return g(t,e)},get_heartbeat:function(){return yt},set_heartbeat:function(t,e){yt=h(t,yt,xt),vt=e||yt/2-1,2==yt&&(vt=1),et(),S()},get_heartbeat_interval:function(){return vt},set_heartbeat_interval:function(t){vt=t,S()},get_version:function(){return E},getGcmMessageObject:function(t){return{data:t}},getApnsMessageObject:function(t){var e={aps:{badge:1,alert:""}};for(var n in t)n[e]=t[n];return e},_add_param:function(t,e){wt[t]=e},channel_group:function(t,e){var n,r,o=t.channel_group,e=e||t.callback,i=t.channels||t.channel,s=t.cloak,u=[],a={},c=t.mode||"add";if(o){var h=o.split(":");h.length>1?(n="*"===h[0]?null:h[0],r=h[1]):r=h[0]}n&&u.push("namespace")&&u.push(f.encode(n)),u.push("channel-group"),r&&"*"!==r&&u.push(r),i?(f.isArray(i)&&(i=i.join(",")),a[c]=i,a.cloak=rt?"true":"false"):"remove"===c&&u.push("remove"),"undefined"!=typeof s&&(a.cloak=s?"true":"false"),C(t,e,u,a)},channel_group_list_groups:function(t,e){var n;n=t.namespace||t.ns||t.channel_group||null,n&&(t.channel_group=n+":*"),Nt.channel_group(t,e)},channel_group_list_channels:function(t,e){return t.channel_group?void Nt.channel_group(t,e):xt("Missing Channel Group")},channel_group_remove_channel:function(t,e){return t.channel_group?t.channel||t.channels?(t.mode="remove",void Nt.channel_group(t,e)):xt("Missing Channel"):xt("Missing Channel Group")},channel_group_remove_group:function(t,e){return t.channel_group?t.channel?xt("Use channel_group_remove_channel if you want to remove a channel from a group."):(t.mode="remove",void Nt.channel_group(t,e)):xt("Missing Channel Group")},channel_group_add_channel:function(t,e){return t.channel_group?t.channel||t.channels?void Nt.channel_group(t,e):xt("Missing Channel"):xt("Missing Channel Group")},channel_group_cloak:function(t,e){return"undefined"==typeof t.cloak?void e(rt):(rt=t.cloak,void Nt.channel_group(t,e))},channel_group_list_namespaces:function(t,e){var n=["namespace"];C(t,e,n)},channel_group_remove_namespace:function(t,e){var n=["namespace",t.namespace,"remove"];C(t,e,n)},history:function(t,e){var e=t.callback||e,r=t.count||t.limit||100,o=t.reverse||"false",i=t.error||function(){},s=t.auth_key||J,u=t.cipher_key,a=t.channel,c=t.channel_group,h=t.start,p=t.end,l=t.include_token,d=t.string_message_token||!1,y={},v=Ot();return a||c?e?V?(y.stringtoken="true",y.count=r,y.reverse=o,y.auth=s,c&&(y["channel-group"]=c,a||(a=",")),v&&(y.callback=v),h&&(y.start=h),p&&(y.end=p),l&&(y.include_token="true"),d&&(y.string_message_token="true"),void M({callback:v,data:n(y),success:function(t){if("object"==typeof t&&t.error)return void i({message:t.message,payload:t.payload});for(var n=t[0],r=[],o=0;o<n.length;o++)if(l){var s=g(n[o].message,u),a=n[o].timetoken;try{r.push({message:JSON.parse(s),timetoken:a})}catch(c){r.push({message:s,timetoken:a})}}else{var s=g(n[o],u);try{r.push(JSON.parse(s))}catch(c){r.push(s)}}e([r,t[1],t[2]])},fail:function(t){A(t,i)},url:[Q,"v2","history","sub-key",V,"channel",f.encode(a)]})):xt("Missing Subscribe Key"):xt("Missing Callback"):xt("Missing Channel")},replay:function(t,e){var r,e=e||t.callback||function(){},o=t.auth_key||J,i=t.source,s=t.destination,u=t.error||t.error||function(){},a=t.stop,c=t.start,h=t.end,f=t.reverse,p=t.limit,l=Ot(),d={};return i?s?Y?V?("0"!=l&&(d.callback=l),a&&(d.stop="all"),f&&(d.reverse="true"),c&&(d.start=c),h&&(d.end=h),p&&(d.count=p),d.auth=o,r=[Q,"v1","replay",Y,V,i,s],void M({callback:l,success:function(t){R(t,e,u)},fail:function(){e([0,"Disconnected"])},url:r,data:n(d)})):xt("Missing Subscribe Key"):xt("Missing Publish Key"):xt("Missing Destination Channel"):xt("Missing Source Channel")},auth:function(t){J=t,et()},time:function(t){var e=Ot(),r={uuid:jt,auth:J};Pt&&(r.instanceid=At),M({callback:e,data:n(r),url:[Q,"time",e],success:function(e){t(e[0])},fail:function(){t(0)}})},publish:function(t,e){var r=t.message;if(!r)return xt("Missing Message");var o,i,e=e||t.callback||r.callback||t.success||function(){},s=t.channel||r.channel,u=t.meta||t.metadata,a=t.auth_key||J,c=t.cipher_key,h=t.error||r.error||function(){},l=t.post||!1,d=!("store_in_history"in t)||t.store_in_history,y=!("replicate"in t)||t.replicate,v=Ot(),g="push";return t.prepend&&(g="unshift"),s?Y?V?(r.getPubnubMessage&&(r=r.getPubnubMessage()),r=JSON.stringify(p(r,c)),i=[Q,"publish",Y,V,0,f.encode(s),v,f.encode(r)],o={uuid:jt,auth:a},u&&"object"==typeof u&&(o.meta=JSON.stringify(u)),d||(o.store="0"),y||(o.norep="true"),Pt&&(o.instanceid=At),nt[g]({callback:v,url:i,data:n(o),fail:function(t){A(t,h),j(1)},success:function(t){R(t,e,h),j(1)},mode:l?"POST":"GET"}),void j()):xt("Missing Subscribe Key"):xt("Missing Publish Key"):xt("Missing Channel")},fire:function(t,e){t.store_in_history=!1,t.replicate=!1,Nt.publish(t,e)},unsubscribe:function(t,e){var n=t.channel,r=t.channel_group,o=t.auth_key||J,e=e||t.callback||function(){},i=t.error||function(){};if(!n&&!r)return xt("Missing Channel or Channel Group");if(!V)return xt("Missing Subscribe Key");if(n){var s=f.isArray(n)?n:(""+n).split(","),u=[],a=[];if(f.each(s,function(t){ft[t]&&u.push(t)}),0==u.length)return void e({action:"leave"});f.each(u,function(t){a.push(t+y)}),f.each(u.concat(a),function(t){t in ft&&delete ft[t],t in lt&&delete lt[t]}),0===ft.length&&0===pt.length&&(ct=0);var c=!0;l&&(c=Nt.LEAVE(u.join(","),0,o,e,i)),c||e({action:"leave"})}if(r){var h=f.isArray(r)?r:(""+r).split(","),p=[],d=[];if(f.each(h,function(t){pt[t]&&p.push(t)}),0==p.length)return void e({action:"leave"});f.each(p,function(t){d.push(t+y)}),f.each(p.concat(d),function(t){t in pt&&delete pt[t],t in lt&&delete lt[t]}),0===ft.length&&0===pt.length&&(ct=0);var c=!0;l&&(c=Nt.LEAVE_GROUP(p.join(","),0,o,e,i)),c||e({action:"leave"})}et()},subscribe:function(t,e){function r(t){t?f.timeout(et,j):(Q=O(Z,1),tt=O(Z,1),f.timeout(function(){Nt.time(r)},_)),T(function(e){return t&&e.disconnected?(e.disconnected=0,e.reconnect(e.name)):void(t||e.disconnected||(e.disconnected=1,e.disconnect(e.name)))}),P(function(e){return t&&e.disconnected?(e.disconnected=0,e.reconnect(e.name)):void(t||e.disconnected||(e.disconnected=1,e.disconnect(e.name)))})}function s(){var t=Ot(),e=o(ft).join(","),u=i(pt).join(",");if(e||u){e||(e=","),N();var a=n({uuid:jt,auth:J});u&&(a["channel-group"]=u);var c=JSON.stringify(lt);c.length>2&&(a.state=JSON.stringify(lt)),yt&&(a.heartbeat=yt),Pt&&(a.instanceid=At),k(),ut=M({timeout:S,callback:t,fail:function(t){t&&t.error&&t.service?(A(t,v),r(!1)):Nt.time(function(e){!e&&A(t,v),r(e)})},data:n(a),url:[tt,"subscribe",V,f.encode(e),t,ct],success:function(t){if(!t||"object"==typeof t&&"error"in t&&t.error)return v(t),f.timeout(et,_);if(b(t[1]),ct=!ct&&at&&St.get(V)||t[1],T(function(t){t.connected||(t.connected=1,t.connect(t.name))}),P(function(t){t.connected||(t.connected=1,t.connect(t.name))}),ht&&!at)return ct=0,ht=!1,St.set(V,0),void f.timeout(s,j);x&&(ct=1e4,x=0),St.set(V,t[1]);var e=function(){var e="",n="";t.length>3?(e=t[3],n=t[2]):e=t.length>2?t[2]:f.map(o(ft),function(e){return f.map(Array(t[0].length).join(",").split(","),function(){return e})}).join(",");var r=e.split(","),i=n?n.split(","):[];return function(){var t=r.shift()||st,e=i.shift(),n={},o={callback:function(){}};e?(t&&t.indexOf("-pnpres")>=0&&e.indexOf("-pnpres")<0&&(e+="-pnpres"),n=pt[e]||ft[e]||o):n=ft[t]||o;var s=[n.callback||it,t.split(y)[0]];return e&&s.push(e.split(y)[0]),s}}(),n=U(+t[1]);f.each(t[0],function(r){var o=e(),i=g(r,ft[o[1]]?ft[o[1]].cipher_key:null);o[0]&&o[0](i,t,o[2]||o[1],n,o[1])}),f.timeout(s,j)}})}}var u=t.channel,a=t.channel_group,e=e||t.callback,e=e||t.message,c=t.connect||function(){},h=t.reconnect||function(){},p=t.disconnect||function(){},v=t.error||v||function(){},b=t.idle||function(){},m=t.presence||0,w=t.noheresync||0,x=t.backfill||0,E=t.timetoken||0,S=t.timeout||z,j=t.windowing||F,R=t.state,C=t.heartbeat||t.pnexpires,B=t.heartbeat_interval,L=t.restore||at;return J=t.auth_key||J,at=L,ct=E,u||a?e?V?((C||0===C||B||0===B)&&Nt.set_heartbeat(C,B),u&&f.each((u.join?u.join(","):""+u).split(","),function(r){var o=ft[r]||{};ft[st=r]={name:r,connected:o.connected,disconnected:o.disconnected,subscribed:1,callback:it=e,cipher_key:t.cipher_key,connect:c,disconnect:p,reconnect:h},R&&(r in R?lt[r]=R[r]:lt[r]=R),m&&(Nt.subscribe({channel:r+y,callback:m,restore:L}),o.subscribed||w||Nt.here_now({channel:r,data:n({uuid:jt,auth:J}),callback:function(t){f.each("uuids"in t?t.uuids:[],function(e){m({action:"join",uuid:e,timestamp:Math.floor(f.rnow()/1e3),occupancy:t.occupancy||1},t,r)})}}))}),a&&f.each((a.join?a.join(","):""+a).split(","),function(r){var o=pt[r]||{};pt[r]={name:r,connected:o.connected,disconnected:o.disconnected,subscribed:1,callback:it=e,cipher_key:t.cipher_key,connect:c,disconnect:p,reconnect:h},m&&(Nt.subscribe({channel_group:r+y,callback:m,restore:L,auth_key:J}),o.subscribed||w||Nt.here_now({channel_group:r,data:n({uuid:jt,auth:J}),callback:function(t){f.each("uuids"in t?t.uuids:[],function(e){m({action:"join",uuid:e,timestamp:Math.floor(f.rnow()/1e3),occupancy:t.occupancy||1},t,r)})}}))}),et=function(){N(),f.timeout(s,j)},l?void et():d.push(et)):xt("Missing Subscribe Key"):xt("Missing Callback"):xt("Missing Channel")},here_now:function(t,e){var e=t.callback||e,r=t.debug,o=t.error||function(){},i=t.auth_key||J,s=t.channel,u=t.channel_group,a=Ot(),c=!("uuids"in t)||t.uuids,h=t.state,p={uuid:jt,auth:i};if(c||(p.disable_uuids=1),h&&(p.state=1),!e)return xt("Missing Callback");if(!V)return xt("Missing Subscribe Key");var l=[Q,"v2","presence","sub_key",V];s&&l.push("channel")&&l.push(f.encode(s)),"0"!=a&&(p.callback=a),u&&(p["channel-group"]=u,!s&&l.push("channel")&&l.push(",")),Pt&&(p.instanceid=At),M({callback:a,data:n(p),success:function(t){R(t,e,o)},fail:function(t){A(t,o)},debug:r,url:l})},where_now:function(t,e){var e=t.callback||e,r=t.error||function(){},o=t.auth_key||J,i=Ot(),s=t.uuid||jt,u={auth:o};return e?V?("0"!=i&&(u.callback=i),Pt&&(u.instanceid=At),void M({callback:i,data:n(u),success:function(t){R(t,e,r)},fail:function(t){A(t,r)},url:[Q,"v2","presence","sub_key",V,"uuid",f.encode(s)]})):xt("Missing Subscribe Key"):xt("Missing Callback")},state:function(t,e){var r,e=t.callback||e||function(t){},o=t.error||function(){},i=t.auth_key||J,s=Ot(),u=t.state,a=t.uuid||jt,c=t.channel,h=t.channel_group,p=n({auth:i});return V?a?c||h?("0"!=s&&(p.callback=s),"undefined"!=typeof c&&ft[c]&&ft[c].subscribed&&u&&(lt[c]=u),"undefined"!=typeof h&&pt[h]&&pt[h].subscribed&&(u&&(lt[h]=u),p["channel-group"]=h,c||(c=",")),p.state=JSON.stringify(u),Pt&&(p.instanceid=At),r=u?[Q,"v2","presence","sub-key",V,"channel",c,"uuid",a,"data"]:[Q,"v2","presence","sub-key",V,"channel",c,"uuid",f.encode(a)],void M({callback:s,data:n(p),success:function(t){R(t,e,o)},fail:function(t){A(t,o)},url:r})):xt("Missing Channel"):xt("Missing UUID"):xt("Missing Subscribe Key")},grant:function(t,e){var e=t.callback||e,r=t.error||function(){},o=t.channel||t.channels,i=t.channel_group,s=Ot(),u=t.ttl,a=t.read?"1":"0",c=t.write?"1":"0",h=t.manage?"1":"0",p=t.auth_key||t.auth_keys;if(!e)return xt("Missing Callback");if(!V)return xt("Missing Subscribe Key");if(!Y)return xt("Missing Publish Key");if(!W)return xt("Missing Secret Key");var l={w:c,r:a};t.manage&&(l.m=h),f.isArray(o)&&(o=o.join(",")),f.isArray(p)&&(p=p.join(",")),"undefined"!=typeof o&&null!=o&&o.length>0&&(l.channel=o),"undefined"!=typeof i&&null!=i&&i.length>0&&(l["channel-group"]=i),"0"!=s&&(l.callback=s),(u||0===u)&&(l.ttl=u),p&&(l.auth=p),l=n(l),p||delete l.auth,M({operation:"PNAccessManagerGrant",callback:s,data:l,success:function(t){R(t,e,r)},fail:function(t){A(t,r)},url:[Q,"v1","auth","grant","sub-key",V]})},mobile_gw_provision:function(t){var e,n,r=t.callback||function(){},o=t.auth_key||J,i=t.error||function(){},s=Ot(),u=t.channel,a=t.op,c=t.gw_type,h=t.device_id;return h?c?a?u?V?(n=[Q,"v1/push/sub-key",V,"devices",h],e={uuid:jt,auth:o,type:c},"add"==a?e.add=u:"remove"==a&&(e.remove=u),Pt&&(e.instanceid=At),void M({callback:s,data:e,success:function(t){R(t,r,i)},fail:function(t){A(t,i)},url:n})):xt("Missing Subscribe Key"):xt("Missing gw destination Channel (channel)"):xt("Missing GW Operation (op: add or remove)"):xt("Missing GW Type (gw_type: gcm or apns)"):xt("Missing Device ID (device_id)")},audit:function(t,e){var e=t.callback||e,r=t.error||function(){},o=t.channel,i=t.channel_group,s=t.auth_key,u=Ot();if(!e)return xt("Missing Callback");if(!V)return xt("Missing Subscribe Key");if(!Y)return xt("Missing Publish Key");if(!W)return xt("Missing Secret Key");var a={};"0"!=u&&(a.callback=u),"undefined"!=typeof o&&null!=o&&o.length>0&&(a.channel=o),"undefined"!=typeof i&&null!=i&&i.length>0&&(a["channel-group"]=i),s&&(a.auth=s),a=n(a),s||delete a.auth,M({operation:"PNAccessManagerAudit",callback:u,data:a,success:function(t){R(t,e,r)},fail:function(t){A(t,r)},url:[Q,"v1","auth","audit","sub-key",V]})},revoke:function(t,e){t.read=!1,t.write=!1,Nt.grant(t,e)},set_uuid:function(t){jt=t,et()},get_uuid:function(){return jt},isArray:function(t){return f.isArray(t)},get_subscribed_channels:function(){return o(ft,!0)},presence_heartbeat:function(t){var e=t.callback||function(){},r=t.error||function(){},s=Ot(),u={uuid:jt,auth:J},a=JSON.stringify(lt);a.length>2&&(u.state=JSON.stringify(lt)),yt>0&&yt<320&&(u.heartbeat=yt),"0"!=s&&(u.callback=s);var c=f.encode(o(ft,!0).join(",")),h=i(pt,!0).join(",");c||(c=","),h&&(u["channel-group"]=h),Pt&&(u.instanceid=At),M({callback:s,data:n(u),url:[Q,"v2","presence","sub-key",V,"channel",c,"heartbeat"],success:function(t){R(t,e,r)},fail:function(t){A(t,r)}})},stop_timers:function(){clearTimeout(I),clearTimeout(D),clearTimeout(dt)},shutdown:function(){Nt.stop_timers(),Mt&&Mt()},xdr:_t,ready:s,db:St,uuid:f.generateUUID,map:f.map,each:f.each,"each-channel":T,grep:f.grep,offline:function(){N(1,{message:"Offline. Please check your network settings."})},supplant:f.supplant,now:f.rnow,unique:r,updater:f.updater};return jt||(jt=Nt.uuid()),At||(At=Nt.uuid()),St.set(V+"uuid",jt),I=f.timeout(B,_),D=f.timeout(L,H),dt=f.timeout(k,(vt-3)*_),q(),Nt}var c=n(2),h=n(3),f=n(4),p=1,l=!1,d=[],y="-pnpres",v=10,g=15e3,b=310,m=60,_=1e3,w=5,x=30,E=c.version,O=function(){var t=20,e=Math.floor(Math.random()*t);return function(n,r){return n.indexOf("pubsub.")>0&&n.replace("pubsub","ps"+(r?f.generateUUID().split("-")[0]:++e<t?e:e=1))||n}}();t.exports={PN_API:a,unique:r,PNmessage:u,DEF_TIMEOUT:g,timeout:f.timeout,build_url:f.buildURL,each:f.each,uuid:f.generateUUID,URLBIT:h.URLBIT,grep:f.grep,supplant:f.supplant,now:f.rnow,updater:f.updater,map:f.map}},function(t,e){t.exports={name:"pubnub",preferGlobal:!1,version:"3.16.3",author:"PubNub <support@pubnub.com>",description:"Publish & Subscribe Real-time Messaging with PubNub",contributors:[{name:"Stephen Blum",email:"stephen@pubnub.com"}],bin:{},scripts:{test:"grunt test --force"},main:"./node.js/pubnub.js",browser:"./modern/dist/pubnub.js",repository:{type:"git",url:"git://github.com/pubnub/javascript.git"},keywords:["cloud","publish","subscribe","websockets","comet","bosh","xmpp","real-time","messaging"],dependencies:{agentkeepalive:"~0.2",lodash:"^4.1.0"},noAnalyze:!1,devDependencies:{chai:"^3.5.0",eslint:"2.4.0","eslint-config-airbnb":"^6.0.2","eslint-plugin-flowtype":"^2.1.0","eslint-plugin-mocha":"^2.0.0","eslint-plugin-react":"^4.1.0","flow-bin":"^0.22.0",grunt:"^0.4.5","grunt-contrib-clean":"^1.0.0","grunt-contrib-copy":"^0.8.2","grunt-contrib-uglify":"^0.11.1","grunt-env":"^0.4.4","grunt-eslint":"^18.0.0","grunt-flow":"^1.0.3","grunt-karma":"^0.12.1","grunt-mocha-istanbul":"^3.0.1","grunt-text-replace":"^0.4.0","grunt-webpack":"^1.0.11","imports-loader":"^0.6.5",isparta:"^4.0.0","json-loader":"^0.5.4",karma:"^0.13.21","karma-chai":"^0.1.0","karma-mocha":"^0.2.1","karma-phantomjs-launcher":"^1.0.0","karma-spec-reporter":"0.0.24","load-grunt-tasks":"^3.4.0",mocha:"^2.4.5",nock:"^1.1.0","node-uuid":"^1.4.7",nodeunit:"^0.9.0","phantomjs-prebuilt":"^2.1.4",proxyquire:"^1.7.4",sinon:"^1.17.2","uglify-js":"^2.6.1",underscore:"^1.7.0",webpack:"^1.12.13","webpack-dev-server":"^1.14.1"},bundleDependencies:[],license:"MIT",engine:{node:">=0.8"},files:["core","node.js","modern","CHANGELOG","FUTURE.md","LICENSE","README.md"]}},function(t,e){t.exports={PARAMSBIT:"&",URLBIT:"/"}},function(t,e,n){function r(){return+new Date}function o(t){return!!t&&"string"!=typeof t&&(Array.isArray&&Array.isArray(t)||"number"==typeof t.length)}function i(t,e){if(t&&e)if(o(t))for(var n=0,r=t.length;n<r;)e.call(t[n],t[n],n++);else for(var n in t)t.hasOwnProperty&&t.hasOwnProperty(n)&&e.call(t[n],n,t[n])}function s(t){return encodeURIComponent(t)}function u(t,e){var n=t.join(y.URLBIT),r=[];return e?(i(e,function(t,e){var n="object"==typeof e?JSON.stringify(e):e;"undefined"!=typeof e&&null!==e&&s(n).length>0&&r.push(t+"="+s(n))}),n+="?"+r.join(y.PARAMSBIT)):n}function a(t,e){var n,o=0,i=function(){o+e>r()?(clearTimeout(n),n=setTimeout(i,e)):(o=r(),t())};return i}function c(t,e){var n=[];return i(t||[],function(t){e(t)&&n.push(t)}),n}function h(t,e){return t.replace(v,function(t,n){return e[n]||t})}function f(t,e){if("undefined"!=typeof setTimeout)return setTimeout(t,e)}function p(t){var e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=16*Math.random()|0,n="x"===t?e:3&e|8;return n.toString(16)});return t&&t(e),e}function l(t,e){var n=[];return i(t||[],function(t,r){n.push(e(t,r))}),n}function d(t){return encodeURIComponent(t).replace(/[!'()*~]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}var y=n(3),v=/{([\w\-]+)}/g;t.exports={buildURL:u,encode:s,each:i,updater:a,rnow:r,isArray:o,map:l,pamEncode:d,generateUUID:p,timeout:f,supplant:h,grep:c}},function(t,e,n){function r(){function t(t){return o.SHA256(t).toString(o.enc.Hex)}function e(t){return t=t||{},t.hasOwnProperty("encryptKey")||(t.encryptKey=f.encryptKey),t.hasOwnProperty("keyEncoding")||(t.keyEncoding=f.keyEncoding),t.hasOwnProperty("keyLength")||(t.keyLength=f.keyLength),t.hasOwnProperty("mode")||(t.mode=f.mode),a.indexOf(t.keyEncoding.toLowerCase())==-1&&(t.keyEncoding=f.keyEncoding),c.indexOf(parseInt(t.keyLength,10))==-1&&(t.keyLength=f.keyLength),h.indexOf(t.mode.toLowerCase())==-1&&(t.mode=f.mode),t}function n(t,e){return"base64"===e.keyEncoding?o.enc.Base64.parse(t):"hex"===e.keyEncoding?o.enc.Hex.parse(t):t}function r(e,r){return e=n(e,r),r.encryptKey?o.enc.Utf8.parse(t(e).slice(0,32)):e}function i(t){return"ecb"===t.mode?o.mode.ECB:o.mode.CBC}function s(t){return"cbc"===t.mode?o.enc.Utf8.parse(u):null}var u="0123456789012345",a=["hex","utf8","base64","binary"],c=[128,256],h=["ecb","cbc"],f={encryptKey:!0,keyEncoding:"utf8",keyLength:256,mode:"cbc"};return{encrypt:function(t,n,u){if(!n)return t;u=e(u);var a=s(u),c=i(u),h=r(n,u),f=JSON.stringify(t),p=o.AES.encrypt(f,h,{iv:a,mode:c}).ciphertext,l=p.toString(o.enc.Base64);return l||t},decrypt:function(t,n,u){if(!n)return t;u=e(u);var a=s(u),c=i(u),h=r(n,u);try{var f=o.enc.Base64.parse(t),p=o.AES.decrypt({ciphertext:f},h,{iv:a,mode:c}).toString(o.enc.Utf8),l=JSON.parse(p);return l}catch(d){return}}}}var o=n(6);t.exports=r},function(t,e){var n=n||function(t,e){var n={},r=n.lib={},o=function(){},i=r.Base={extend:function(t){o.prototype=this;var e=new o;return t&&e.mixIn(t),e.hasOwnProperty("init")||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},s=r.WordArray=i.extend({init:function(t,n){t=this.words=t||[],this.sigBytes=n!=e?n:4*t.length},toString:function(t){return(t||a).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes;if(t=t.sigBytes,this.clamp(),r%4)for(var o=0;o<t;o++)e[r+o>>>2]|=(n[o>>>2]>>>24-8*(o%4)&255)<<24-8*((r+o)%4);else if(65535<n.length)for(o=0;o<t;o+=4)e[r+o>>>2]=n[o>>>2];else e.push.apply(e,n);return this.sigBytes+=t,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-8*(n%4),e.length=t.ceil(n/4)},clone:function(){var t=i.clone.call(this);return t.words=this.words.slice(0),t},random:function(e){for(var n=[],r=0;r<e;r+=4)n.push(4294967296*t.random()|0);return new s.init(n,e)}}),u=n.enc={},a=u.Hex={stringify:function(t){var e=t.words;t=t.sigBytes;for(var n=[],r=0;r<t;r++){var o=e[r>>>2]>>>24-8*(r%4)&255;n.push((o>>>4).toString(16)),n.push((15&o).toString(16))}return n.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-4*(r%8);return new s.init(n,e/2)}},c=u.Latin1={stringify:function(t){var e=t.words;t=t.sigBytes;for(var n=[],r=0;r<t;r++)n.push(String.fromCharCode(e[r>>>2]>>>24-8*(r%4)&255));return n.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-8*(r%4);return new s.init(n,e)}},h=u.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(e){throw Error("Malformed UTF-8 data")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},f=r.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=h.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n=this._data,r=n.words,o=n.sigBytes,i=this.blockSize,u=o/(4*i),u=e?t.ceil(u):t.max((0|u)-this._minBufferSize,0);if(e=u*i,o=t.min(4*e,o),e){for(var a=0;a<e;a+=i)this._doProcessBlock(r,a);a=r.splice(0,e),n.sigBytes-=o}return new s.init(a,o)},clone:function(){var t=i.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});r.Hasher=f.extend({cfg:i.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new p.HMAC.init(t,n).finalize(e)}}});var p=n.algo={};return n;
}(Math);!function(t){for(var e=n,r=e.lib,o=r.WordArray,i=r.Hasher,r=e.algo,s=[],u=[],a=function(t){return 4294967296*(t-(0|t))|0},c=2,h=0;64>h;){var f;t:{f=c;for(var p=t.sqrt(f),l=2;l<=p;l++)if(!(f%l)){f=!1;break t}f=!0}f&&(8>h&&(s[h]=a(t.pow(c,.5))),u[h]=a(t.pow(c,1/3)),h++),c++}var d=[],r=r.SHA256=i.extend({_doReset:function(){this._hash=new o.init(s.slice(0))},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],a=n[4],c=n[5],h=n[6],f=n[7],p=0;64>p;p++){if(16>p)d[p]=0|t[e+p];else{var l=d[p-15],y=d[p-2];d[p]=((l<<25|l>>>7)^(l<<14|l>>>18)^l>>>3)+d[p-7]+((y<<15|y>>>17)^(y<<13|y>>>19)^y>>>10)+d[p-16]}l=f+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&c^~a&h)+u[p]+d[p],y=((r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22))+(r&o^r&i^o&i),f=h,h=c,c=a,a=s+l|0,s=i,i=o,o=r,r=l+y|0}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+c|0,n[6]=n[6]+h|0,n[7]=n[7]+f|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,o=8*e.sigBytes;return n[o>>>5]|=128<<24-o%32,n[(o+64>>>9<<4)+14]=t.floor(r/4294967296),n[(o+64>>>9<<4)+15]=r,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=i._createHelper(r),e.HmacSHA256=i._createHmacHelper(r)}(Math),function(){var t=n,e=t.enc.Utf8;t.algo.HMAC=t.lib.Base.extend({init:function(t,n){t=this._hasher=new t.init,"string"==typeof n&&(n=e.parse(n));var r=t.blockSize,o=4*r;n.sigBytes>o&&(n=t.finalize(n)),n.clamp();for(var i=this._oKey=n.clone(),s=this._iKey=n.clone(),u=i.words,a=s.words,c=0;c<r;c++)u[c]^=1549556828,a[c]^=909522486;i.sigBytes=s.sigBytes=o,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher;return t=e.finalize(t),e.reset(),e.finalize(this._oKey.clone().concat(t))}})}(),function(){var t=n,e=t.lib.WordArray;t.enc.Base64={stringify:function(t){var e=t.words,n=t.sigBytes,r=this._map;t.clamp(),t=[];for(var o=0;o<n;o+=3)for(var i=(e[o>>>2]>>>24-8*(o%4)&255)<<16|(e[o+1>>>2]>>>24-8*((o+1)%4)&255)<<8|e[o+2>>>2]>>>24-8*((o+2)%4)&255,s=0;4>s&&o+.75*s<n;s++)t.push(r.charAt(i>>>6*(3-s)&63));if(e=r.charAt(64))for(;t.length%4;)t.push(e);return t.join("")},parse:function(t){var n=t.length,r=this._map,o=r.charAt(64);o&&(o=t.indexOf(o),-1!=o&&(n=o));for(var o=[],i=0,s=0;s<n;s++)if(s%4){var u=r.indexOf(t.charAt(s-1))<<2*(s%4),a=r.indexOf(t.charAt(s))>>>6-2*(s%4);o[i>>>2]|=(u|a)<<24-8*(i%4),i++}return e.create(o,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),function(t){function e(t,e,n,r,o,i,s){return t=t+(e&n|~e&r)+o+s,(t<<i|t>>>32-i)+e}function r(t,e,n,r,o,i,s){return t=t+(e&r|n&~r)+o+s,(t<<i|t>>>32-i)+e}function o(t,e,n,r,o,i,s){return t=t+(e^n^r)+o+s,(t<<i|t>>>32-i)+e}function i(t,e,n,r,o,i,s){return t=t+(n^(e|~r))+o+s,(t<<i|t>>>32-i)+e}for(var s=n,u=s.lib,a=u.WordArray,c=u.Hasher,u=s.algo,h=[],f=0;64>f;f++)h[f]=4294967296*t.abs(t.sin(f+1))|0;u=u.MD5=c.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,n){for(var s=0;16>s;s++){var u=n+s,a=t[u];t[u]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}var s=this._hash.words,u=t[n+0],a=t[n+1],c=t[n+2],f=t[n+3],p=t[n+4],l=t[n+5],d=t[n+6],y=t[n+7],v=t[n+8],g=t[n+9],b=t[n+10],m=t[n+11],_=t[n+12],w=t[n+13],x=t[n+14],E=t[n+15],O=s[0],S=s[1],k=s[2],j=s[3],O=e(O,S,k,j,u,7,h[0]),j=e(j,O,S,k,a,12,h[1]),k=e(k,j,O,S,c,17,h[2]),S=e(S,k,j,O,f,22,h[3]),O=e(O,S,k,j,p,7,h[4]),j=e(j,O,S,k,l,12,h[5]),k=e(k,j,O,S,d,17,h[6]),S=e(S,k,j,O,y,22,h[7]),O=e(O,S,k,j,v,7,h[8]),j=e(j,O,S,k,g,12,h[9]),k=e(k,j,O,S,b,17,h[10]),S=e(S,k,j,O,m,22,h[11]),O=e(O,S,k,j,_,7,h[12]),j=e(j,O,S,k,w,12,h[13]),k=e(k,j,O,S,x,17,h[14]),S=e(S,k,j,O,E,22,h[15]),O=r(O,S,k,j,a,5,h[16]),j=r(j,O,S,k,d,9,h[17]),k=r(k,j,O,S,m,14,h[18]),S=r(S,k,j,O,u,20,h[19]),O=r(O,S,k,j,l,5,h[20]),j=r(j,O,S,k,b,9,h[21]),k=r(k,j,O,S,E,14,h[22]),S=r(S,k,j,O,p,20,h[23]),O=r(O,S,k,j,g,5,h[24]),j=r(j,O,S,k,x,9,h[25]),k=r(k,j,O,S,f,14,h[26]),S=r(S,k,j,O,v,20,h[27]),O=r(O,S,k,j,w,5,h[28]),j=r(j,O,S,k,c,9,h[29]),k=r(k,j,O,S,y,14,h[30]),S=r(S,k,j,O,_,20,h[31]),O=o(O,S,k,j,l,4,h[32]),j=o(j,O,S,k,v,11,h[33]),k=o(k,j,O,S,m,16,h[34]),S=o(S,k,j,O,x,23,h[35]),O=o(O,S,k,j,a,4,h[36]),j=o(j,O,S,k,p,11,h[37]),k=o(k,j,O,S,y,16,h[38]),S=o(S,k,j,O,b,23,h[39]),O=o(O,S,k,j,w,4,h[40]),j=o(j,O,S,k,u,11,h[41]),k=o(k,j,O,S,f,16,h[42]),S=o(S,k,j,O,d,23,h[43]),O=o(O,S,k,j,g,4,h[44]),j=o(j,O,S,k,_,11,h[45]),k=o(k,j,O,S,E,16,h[46]),S=o(S,k,j,O,c,23,h[47]),O=i(O,S,k,j,u,6,h[48]),j=i(j,O,S,k,y,10,h[49]),k=i(k,j,O,S,x,15,h[50]),S=i(S,k,j,O,l,21,h[51]),O=i(O,S,k,j,_,6,h[52]),j=i(j,O,S,k,f,10,h[53]),k=i(k,j,O,S,b,15,h[54]),S=i(S,k,j,O,a,21,h[55]),O=i(O,S,k,j,v,6,h[56]),j=i(j,O,S,k,E,10,h[57]),k=i(k,j,O,S,d,15,h[58]),S=i(S,k,j,O,w,21,h[59]),O=i(O,S,k,j,p,6,h[60]),j=i(j,O,S,k,m,10,h[61]),k=i(k,j,O,S,c,15,h[62]),S=i(S,k,j,O,g,21,h[63]);s[0]=s[0]+O|0,s[1]=s[1]+S|0,s[2]=s[2]+k|0,s[3]=s[3]+j|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,o=8*e.sigBytes;n[o>>>5]|=128<<24-o%32;var i=t.floor(r/4294967296);for(n[(o+64>>>9<<4)+15]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[(o+64>>>9<<4)+14]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),e.sigBytes=4*(n.length+1),this._process(),e=this._hash,n=e.words,r=0;4>r;r++)o=n[r],n[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8);return e},clone:function(){var t=c.clone.call(this);return t._hash=this._hash.clone(),t}}),s.MD5=c._createHelper(u),s.HmacMD5=c._createHmacHelper(u)}(Math),function(){var t=n,e=t.lib,r=e.Base,o=e.WordArray,e=t.algo,i=e.EvpKDF=r.extend({cfg:r.extend({keySize:4,hasher:e.MD5,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var n=this.cfg,r=n.hasher.create(),i=o.create(),s=i.words,u=n.keySize,n=n.iterations;s.length<u;){a&&r.update(a);var a=r.update(t).finalize(e);r.reset();for(var c=1;c<n;c++)a=r.finalize(a),r.reset();i.concat(a)}return i.sigBytes=4*u,i}});t.EvpKDF=function(t,e,n){return i.create(n).compute(t,e)}}(),n.lib.Cipher||function(t){var e=n,r=e.lib,o=r.Base,i=r.WordArray,s=r.BufferedBlockAlgorithm,u=e.enc.Base64,a=e.algo.EvpKDF,c=r.Cipher=s.extend({cfg:o.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,n){this.cfg=this.cfg.extend(n),this._xformMode=t,this._key=e,this.reset()},reset:function(){s.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(t){return{encrypt:function(e,n,r){return("string"==typeof n?y:d).encrypt(t,e,n,r)},decrypt:function(e,n,r){return("string"==typeof n?y:d).decrypt(t,e,n,r)}}}});r.StreamCipher=c.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var h=e.mode={},f=function(e,n,r){var o=this._iv;o?this._iv=t:o=this._prevBlock;for(var i=0;i<r;i++)e[n+i]^=o[i]},p=(r.BlockCipherMode=o.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}})).extend();p.Encryptor=p.extend({processBlock:function(t,e){var n=this._cipher,r=n.blockSize;f.call(this,t,e,r),n.encryptBlock(t,e),this._prevBlock=t.slice(e,e+r)}}),p.Decryptor=p.extend({processBlock:function(t,e){var n=this._cipher,r=n.blockSize,o=t.slice(e,e+r);n.decryptBlock(t,e),f.call(this,t,e,r),this._prevBlock=o}}),h=h.CBC=p,p=(e.pad={}).Pkcs7={pad:function(t,e){for(var n=4*e,n=n-t.sigBytes%n,r=n<<24|n<<16|n<<8|n,o=[],s=0;s<n;s+=4)o.push(r);n=i.create(o,n),t.concat(n)},unpad:function(t){t.sigBytes-=255&t.words[t.sigBytes-1>>>2]}},r.BlockCipher=c.extend({cfg:c.cfg.extend({mode:h,padding:p}),reset:function(){c.reset.call(this);var t=this.cfg,e=t.iv,t=t.mode;if(this._xformMode==this._ENC_XFORM_MODE)var n=t.createEncryptor;else n=t.createDecryptor,this._minBufferSize=1;this._mode=n.call(t,this,e&&e.words)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){t.pad(this._data,this.blockSize);var e=this._process(!0)}else e=this._process(!0),t.unpad(e);return e},blockSize:4});var l=r.CipherParams=o.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),h=(e.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext;return t=t.salt,(t?i.create([1398893684,1701076831]).concat(t).concat(e):e).toString(u)},parse:function(t){t=u.parse(t);var e=t.words;if(1398893684==e[0]&&1701076831==e[1]){var n=i.create(e.slice(2,4));e.splice(0,4),t.sigBytes-=16}return l.create({ciphertext:t,salt:n})}},d=r.SerializableCipher=o.extend({cfg:o.extend({format:h}),encrypt:function(t,e,n,r){r=this.cfg.extend(r);var o=t.createEncryptor(n,r);return e=o.finalize(e),o=o.cfg,l.create({ciphertext:e,key:n,iv:o.iv,algorithm:t,mode:o.mode,padding:o.padding,blockSize:t.blockSize,formatter:r.format})},decrypt:function(t,e,n,r){return r=this.cfg.extend(r),e=this._parse(e,r.format),t.createDecryptor(n,r).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),e=(e.kdf={}).OpenSSL={execute:function(t,e,n,r){return r||(r=i.random(8)),t=a.create({keySize:e+n}).compute(t,r),n=i.create(t.words.slice(e),4*n),t.sigBytes=4*e,l.create({key:t,iv:n,salt:r})}},y=r.PasswordBasedCipher=d.extend({cfg:d.cfg.extend({kdf:e}),encrypt:function(t,e,n,r){return r=this.cfg.extend(r),n=r.kdf.execute(n,t.keySize,t.ivSize),r.iv=n.iv,t=d.encrypt.call(this,t,e,n.key,r),t.mixIn(n),t},decrypt:function(t,e,n,r){return r=this.cfg.extend(r),e=this._parse(e,r.format),n=r.kdf.execute(n,t.keySize,t.ivSize,e.salt),r.iv=n.iv,d.decrypt.call(this,t,e,n.key,r)}})}(),function(){for(var t=n,e=t.lib.BlockCipher,r=t.algo,o=[],i=[],s=[],u=[],a=[],c=[],h=[],f=[],p=[],l=[],d=[],y=0;256>y;y++)d[y]=128>y?y<<1:y<<1^283;for(var v=0,g=0,y=0;256>y;y++){var b=g^g<<1^g<<2^g<<3^g<<4,b=b>>>8^255&b^99;o[v]=b,i[b]=v;var m=d[v],_=d[m],w=d[_],x=257*d[b]^16843008*b;s[v]=x<<24|x>>>8,u[v]=x<<16|x>>>16,a[v]=x<<8|x>>>24,c[v]=x,x=16843009*w^65537*_^257*m^16843008*v,h[b]=x<<24|x>>>8,f[b]=x<<16|x>>>16,p[b]=x<<8|x>>>24,l[b]=x,v?(v=m^d[d[d[w^m]]],g^=d[d[g]]):v=g=1}var E=[0,1,2,4,8,16,32,64,128,27,54],r=r.AES=e.extend({_doReset:function(){for(var t=this._key,e=t.words,n=t.sigBytes/4,t=4*((this._nRounds=n+6)+1),r=this._keySchedule=[],i=0;i<t;i++)if(i<n)r[i]=e[i];else{var s=r[i-1];i%n?6<n&&4==i%n&&(s=o[s>>>24]<<24|o[s>>>16&255]<<16|o[s>>>8&255]<<8|o[255&s]):(s=s<<8|s>>>24,s=o[s>>>24]<<24|o[s>>>16&255]<<16|o[s>>>8&255]<<8|o[255&s],s^=E[i/n|0]<<24),r[i]=r[i-n]^s}for(e=this._invKeySchedule=[],n=0;n<t;n++)i=t-n,s=n%4?r[i]:r[i-4],e[n]=4>n||4>=i?s:h[o[s>>>24]]^f[o[s>>>16&255]]^p[o[s>>>8&255]]^l[o[255&s]]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,s,u,a,c,o)},decryptBlock:function(t,e){var n=t[e+1];t[e+1]=t[e+3],t[e+3]=n,this._doCryptBlock(t,e,this._invKeySchedule,h,f,p,l,i),n=t[e+1],t[e+1]=t[e+3],t[e+3]=n},_doCryptBlock:function(t,e,n,r,o,i,s,u){for(var a=this._nRounds,c=t[e]^n[0],h=t[e+1]^n[1],f=t[e+2]^n[2],p=t[e+3]^n[3],l=4,d=1;d<a;d++)var y=r[c>>>24]^o[h>>>16&255]^i[f>>>8&255]^s[255&p]^n[l++],v=r[h>>>24]^o[f>>>16&255]^i[p>>>8&255]^s[255&c]^n[l++],g=r[f>>>24]^o[p>>>16&255]^i[c>>>8&255]^s[255&h]^n[l++],p=r[p>>>24]^o[c>>>16&255]^i[h>>>8&255]^s[255&f]^n[l++],c=y,h=v,f=g;y=(u[c>>>24]<<24|u[h>>>16&255]<<16|u[f>>>8&255]<<8|u[255&p])^n[l++],v=(u[h>>>24]<<24|u[f>>>16&255]<<16|u[p>>>8&255]<<8|u[255&c])^n[l++],g=(u[f>>>24]<<24|u[p>>>16&255]<<16|u[c>>>8&255]<<8|u[255&h])^n[l++],p=(u[p>>>24]<<24|u[c>>>16&255]<<16|u[h>>>8&255]<<8|u[255&f])^n[l++],t[e]=y,t[e+1]=v,t[e+2]=g,t[e+3]=p},keySize:8});t.AES=e._createHelper(r)}(),n.mode.ECB=function(){var t=n.lib.BlockCipherMode.extend();return t.Encryptor=t.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),t.Decryptor=t.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),t}(),t.exports=n},function(t,e){var n=function(t,e){if(!(this instanceof n))return new n(t,e);var r=this,t=r.url=t||"",o=(r.protocol=e||"Sec-WebSocket-Protocol",t.split("/")),i={ssl:"wss:"===o[0],origin:o[2],publish_key:o[3],subscribe_key:o[4],channel:o[5]};return r.CONNECTING=0,r.OPEN=1,r.CLOSING=2,r.CLOSED=3,r.CLOSE_NORMAL=1e3,r.CLOSE_GOING_AWAY=1001,r.CLOSE_PROTOCOL_ERROR=1002,r.CLOSE_UNSUPPORTED=1003,r.CLOSE_TOO_LARGE=1004,r.CLOSE_NO_STATUS=1005,r.CLOSE_ABNORMAL=1006,r.onclose=r.onerror=r.onmessage=r.onopen=r.onsend=function(){},r.binaryType="",r.extensions="",r.bufferedAmount=0,r.trasnmitting=!1,r.buffer=[],r.readyState=r.CONNECTING,t?(r.pubnub=PUBNUB.init(i),r.pubnub.setup=i,r.setup=i,void r.pubnub.subscribe({restore:!1,channel:i.channel,disconnect:r.onerror,reconnect:r.onopen,error:function(){r.onclose({code:r.CLOSE_ABNORMAL,reason:"Missing URL",wasClean:!1})},callback:function(t){r.onmessage({data:t})},connect:function(){r.readyState=r.OPEN,r.onopen()}})):(r.readyState=r.CLOSED,r.onclose({code:r.CLOSE_ABNORMAL,reason:"Missing URL",wasClean:!0}),r)};n.prototype.send=function(t){var e=this;e.pubnub.publish({channel:e.pubnub.setup.channel,message:t,callback:function(t){e.onsend({data:t})}})},n.prototype.close=function(){var t=this;t.pubnub.unsubscribe({channel:t.pubnub.setup.channel}),t.readyState=t.CLOSED,t.onclose({})},t.exports=n}])})},function(t,e,n){t.exports=n(67)},function(t,e,n){/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var r=[],e=t.exports={};/*!
	 * Chai version
	 */
e.version="3.5.0",/*!
	 * Assertion Error
	 */
e.AssertionError=n(68);/*!
	 * Utils for plugins (not exported)
	 */
var o=n(69);e.use=function(t){return~r.indexOf(t)||(t(this,o),r.push(t)),this},/*!
	 * Utility Functions
	 */
e.util=o;/*!
	 * Configuration
	 */
var i=n(82);e.config=i;/*!
	 * Primary `Assertion` prototype
	 */
var s=n(97);e.use(s);/*!
	 * Core Assertions
	 */
var u=n(98);e.use(u);/*!
	 * Expect interface
	 */
var a=n(99);e.use(a);/*!
	 * Should interface
	 */
var c=n(100);e.use(c);/*!
	 * Assert interface
	 */
var h=n(101);e.use(h)},function(t,e){/*!
	 * assertion-error
	 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
	 * MIT Licensed
	 */
/*!
	 * Return a function that will copy properties from
	 * one object to another excluding any originally
	 * listed. Returned function will create a new `{}`.
	 *
	 * @param {String} excluded properties ...
	 * @return {Function}
	 */
function n(){function t(t,n){Object.keys(n).forEach(function(r){~e.indexOf(r)||(t[r]=n[r])})}var e=[].slice.call(arguments);return function(){for(var e=[].slice.call(arguments),n=0,r={};n<e.length;n++)t(r,e[n]);return r}}function r(t,e,r){var o=n("name","message","stack","constructor","toJSON"),i=o(e||{});this.message=t||"Unspecified AssertionError",this.showDiff=!1;for(var s in i)this[s]=i[s];if(r=r||arguments.callee,r&&Error.captureStackTrace)Error.captureStackTrace(this,r);else try{throw new Error}catch(u){this.stack=u.stack}}/*!
	 * Primary Exports
	 */
t.exports=r,/*!
	 * Inherit from Error.prototype
	 */
r.prototype=Object.create(Error.prototype),/*!
	 * Statically set name
	 */
r.prototype.name="AssertionError",/*!
	 * Ensure correct constructor
	 */
r.prototype.constructor=r,r.prototype.toJSON=function(t){var e=n("constructor","toJSON","stack"),r=e({name:this.name},this);return!1!==t&&this.stack&&(r.stack=this.stack),r}},function(t,e,n){/*!
	 * chai
	 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Main exports
	 */
var e=t.exports={};/*!
	 * test utility
	 */
e.test=n(70),/*!
	 * type utility
	 */
e.type=n(72),/*!
	 * expectTypes utility
	 */
e.expectTypes=n(74),/*!
	 * message utility
	 */
e.getMessage=n(75),/*!
	 * actual utility
	 */
e.getActual=n(76),/*!
	 * Inspect util
	 */
e.inspect=n(77),/*!
	 * Object Display util
	 */
e.objDisplay=n(81),/*!
	 * Flag utility
	 */
e.flag=n(71),/*!
	 * Flag transferring utility
	 */
e.transferFlags=n(83),/*!
	 * Deep equal utility
	 */
e.eql=n(84),/*!
	 * Deep path value
	 */
e.getPathValue=n(88),/*!
	 * Deep path info
	 */
e.getPathInfo=n(89),/*!
	 * Check if a property exists
	 */
e.hasProperty=n(90),/*!
	 * Function name
	 */
e.getName=n(78),/*!
	 * add Property
	 */
e.addProperty=n(91),/*!
	 * add Method
	 */
e.addMethod=n(92),/*!
	 * overwrite Property
	 */
e.overwriteProperty=n(93),/*!
	 * overwrite Method
	 */
e.overwriteMethod=n(94),/*!
	 * Add a chainable method
	 */
e.addChainableMethod=n(95),/*!
	 * Overwrite chainable method
	 */
e.overwriteChainableMethod=n(96)},function(t,e,n){/*!
	 * Chai - test utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Module dependancies
	 */
var r=n(71);t.exports=function(t,e){var n=r(t,"negate"),o=e[0];return n?!o:o}},function(t,e){/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e,n){var r=t.__flags||(t.__flags=Object.create(null));return 3!==arguments.length?r[e]:void(r[e]=n)}},function(t,e,n){t.exports=n(73)},function(t,e){function n(t){var e=Object.prototype.toString.call(t).match(o)[1].toLowerCase();return"function"==typeof Promise&&t instanceof Promise?"promise":null===t?"null":void 0===t?"undefined":e}function r(){return this instanceof r?void(this.tests={}):new r}/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Primary Exports
	 */
var e=t.exports=n,o=/^\[object (.*)\]$/;e.Library=r,r.prototype.of=n,r.prototype.define=function(t,e){return 1===arguments.length?this.tests[t]:(this.tests[t]=e,this)},r.prototype.test=function(t,e){if(e===n(t))return!0;var r=this.tests[e];if(r&&"regexp"===n(r))return r.test(t);if(r&&"function"===n(r))return r(t);throw new ReferenceError('Type test "'+e+'" not defined or invalid.')}},function(t,e,n){/*!
	 * Chai - expectTypes utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var r=n(68),o=n(71),i=n(72);t.exports=function(t,e){var t=o(t,"object");e=e.map(function(t){return t.toLowerCase()}),e.sort();var n=e.map(function(t,n){var r=~["a","e","i","o","u"].indexOf(t.charAt(0))?"an":"a",o=e.length>1&&n===e.length-1?"or ":"";return o+r+" "+t}).join(", ");if(!e.some(function(e){return i(t)===e}))throw new r("object tested must be "+n+", but "+i(t)+" given")}},function(t,e,n){/*!
	 * Chai - message composition utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Module dependancies
	 */
var r=n(71),o=n(76),i=(n(77),n(81));t.exports=function(t,e){var n=r(t,"negate"),s=r(t,"object"),u=e[3],a=o(t,e),c=n?e[2]:e[1],h=r(t,"message");return"function"==typeof c&&(c=c()),c=c||"",c=c.replace(/#\{this\}/g,function(){return i(s)}).replace(/#\{act\}/g,function(){return i(a)}).replace(/#\{exp\}/g,function(){return i(u)}),h?h+": "+c:c}},function(t,e){/*!
	 * Chai - getActual utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e){return e.length>4?e[4]:t._obj}},function(t,e,n){function r(t,e,n,r){var i={showHidden:e,seen:[],stylize:function(t){return t}};return o(i,t,"undefined"==typeof n?2:n)}function o(t,n,r){if(n&&"function"==typeof n.inspect&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var d=n.inspect(r);return"string"!=typeof d&&(d=o(t,d,r)),d}var m=i(t,n);if(m)return m;if(b(n)){if("outerHTML"in n)return n.outerHTML;try{if(document.xmlVersion){var _=new XMLSerializer;return _.serializeToString(n)}var w="http://www.w3.org/1999/xhtml",x=document.createElementNS(w,"_");return x.appendChild(n.cloneNode(!1)),html=x.innerHTML.replace("><",">"+n.innerHTML+"<"),x.innerHTML="",html}catch(E){}}var O=g(n),S=t.showHidden?v(n):O;if(0===S.length||l(n)&&(1===S.length&&"stack"===S[0]||2===S.length&&"description"===S[0]&&"stack"===S[1])){if("function"==typeof n){var k=y(n),j=k?": "+k:"";return t.stylize("[Function"+j+"]","special")}if(f(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(p(n))return t.stylize(Date.prototype.toUTCString.call(n),"date");if(l(n))return s(n)}var P="",T=!1,R=["{","}"];if(h(n)&&(T=!0,R=["[","]"]),"function"==typeof n){var k=y(n),j=k?": "+k:"";P=" [Function"+j+"]"}if(f(n)&&(P=" "+RegExp.prototype.toString.call(n)),p(n)&&(P=" "+Date.prototype.toUTCString.call(n)),l(n))return s(n);if(0===S.length&&(!T||0==n.length))return R[0]+P+R[1];if(r<0)return f(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special");t.seen.push(n);var A;return A=T?u(t,n,r,O,S):S.map(function(e){return a(t,n,r,O,e,T)}),t.seen.pop(),c(A,P,R)}function i(t,e){switch(typeof e){case"undefined":return t.stylize("undefined","undefined");case"string":var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string");case"number":return 0===e&&1/e===-(1/0)?t.stylize("-0","number"):t.stylize(""+e,"number");case"boolean":return t.stylize(""+e,"boolean")}if(null===e)return t.stylize("null","null")}function s(t){return"["+Error.prototype.toString.call(t)+"]"}function u(t,e,n,r,o){for(var i=[],s=0,u=e.length;s<u;++s)Object.prototype.hasOwnProperty.call(e,String(s))?i.push(a(t,e,n,r,String(s),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(a(t,e,n,r,o,!0))}),i}function a(t,e,n,r,i,s){var u,a;if(e.__lookupGetter__&&(e.__lookupGetter__(i)?a=e.__lookupSetter__(i)?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):e.__lookupSetter__(i)&&(a=t.stylize("[Setter]","special"))),r.indexOf(i)<0&&(u="["+i+"]"),a||(t.seen.indexOf(e[i])<0?(a=null===n?o(t,e[i],null):o(t,e[i],n-1),a.indexOf("\n")>-1&&(a=s?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n"))):a=t.stylize("[Circular]","special")),"undefined"==typeof u){if(s&&i.match(/^\d+$/))return a;u=JSON.stringify(""+i),u.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+a}function c(t,e,n){var r=0,o=t.reduce(function(t,e){return r++,e.indexOf("\n")>=0&&r++,t+e.length+1},0);return o>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}function h(t){return Array.isArray(t)||"object"==typeof t&&"[object Array]"===d(t)}function f(t){return"object"==typeof t&&"[object RegExp]"===d(t)}function p(t){return"object"==typeof t&&"[object Date]"===d(t)}function l(t){return"object"==typeof t&&"[object Error]"===d(t)}function d(t){return Object.prototype.toString.call(t)}var y=n(78),v=n(79),g=n(80);t.exports=r;var b=function(t){return"object"==typeof HTMLElement?t instanceof HTMLElement:t&&"object"==typeof t&&1===t.nodeType&&"string"==typeof t.nodeName}},function(t,e){/*!
	 * Chai - getName utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t){if(t.name)return t.name;var e=/^\s?function ([^(]*)\(/.exec(t);return e&&e[1]?e[1]:""}},function(t,e){/*!
	 * Chai - getProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t){function e(t){n.indexOf(t)===-1&&n.push(t)}for(var n=Object.getOwnPropertyNames(t),r=Object.getPrototypeOf(t);null!==r;)Object.getOwnPropertyNames(r).forEach(e),r=Object.getPrototypeOf(r);return n}},function(t,e){/*!
	 * Chai - getEnumerableProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t){var e=[];for(var n in t)e.push(n);return e}},function(t,e,n){/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Module dependancies
	 */
var r=n(77),o=n(82);t.exports=function(t){var e=r(t),n=Object.prototype.toString.call(t);if(o.truncateThreshold&&e.length>=o.truncateThreshold){if("[object Function]"===n)return t.name&&""!==t.name?"[Function: "+t.name+"]":"[Function]";if("[object Array]"===n)return"[ Array("+t.length+") ]";if("[object Object]"===n){var i=Object.keys(t),s=i.length>2?i.splice(0,2).join(", ")+", ...":i.join(", ");return"{ Object ("+s+") }"}return e}return e}},function(t,e){t.exports={includeStack:!1,showDiff:!0,truncateThreshold:40}},function(t,e){/*!
	 * Chai - transferFlags utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e,n){var r=t.__flags||(t.__flags=Object.create(null));e.__flags||(e.__flags=Object.create(null)),n=3!==arguments.length||n;for(var o in r)(n||"object"!==o&&"ssfi"!==o&&"message"!=o)&&(e.__flags[o]=r[o])}},function(t,e,n){t.exports=n(85)},function(t,e,n){function r(t,e,n){return!!o(t,e)||("date"===y(t)?s(t,e):"regexp"===y(t)?u(t,e):d.isBuffer(t)?f(t,e):"arguments"===y(t)?a(t,e,n):!!i(t,e)&&("object"!==y(t)&&"object"!==y(e)&&"array"!==y(t)&&"array"!==y(e)?o(t,e):l(t,e,n)))}/*!
	 * Strict (egal) equality test. Ensures that NaN always
	 * equals NaN and `-0` does not equal `+0`.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} equal match
	 */
function o(t,e){return t===e?0!==t||1/t===1/e:t!==t&&e!==e}/*!
	 * Compare the types of two given objects and
	 * return if they are equal. Note that an Array
	 * has a type of `array` (not `object`) and arguments
	 * have a type of `arguments` (not `array`/`object`).
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */
function i(t,e){return y(t)===y(e)}/*!
	 * Compare two Date objects by asserting that
	 * the time values are equal using `saveValue`.
	 *
	 * @param {Date} a
	 * @param {Date} b
	 * @return {Boolean} result
	 */
function s(t,e){return"date"===y(e)&&o(t.getTime(),e.getTime())}/*!
	 * Compare two regular expressions by converting them
	 * to string and checking for `sameValue`.
	 *
	 * @param {RegExp} a
	 * @param {RegExp} b
	 * @return {Boolean} result
	 */
function u(t,e){return"regexp"===y(e)&&o(t.toString(),e.toString())}/*!
	 * Assert deep equality of two `arguments` objects.
	 * Unfortunately, these must be sliced to arrays
	 * prior to test to ensure no bad behavior.
	 *
	 * @param {Arguments} a
	 * @param {Arguments} b
	 * @param {Array} memoize (optional)
	 * @return {Boolean} result
	 */
function a(t,e,n){return"arguments"===y(e)&&(t=[].slice.call(t),e=[].slice.call(e),r(t,e,n))}/*!
	 * Get enumerable properties of a given object.
	 *
	 * @param {Object} a
	 * @return {Array} property names
	 */
function c(t){var e=[];for(var n in t)e.push(n);return e}/*!
	 * Simple equality for flat iterable objects
	 * such as Arrays or Node.js buffers.
	 *
	 * @param {Iterable} a
	 * @param {Iterable} b
	 * @return {Boolean} result
	 */
function h(t,e){if(t.length!==e.length)return!1;for(var n=0,r=!0;n<t.length;n++)if(t[n]!==e[n]){r=!1;break}return r}/*!
	 * Extension to `iterableEqual` specifically
	 * for Node.js Buffers.
	 *
	 * @param {Buffer} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */
function f(t,e){return!!d.isBuffer(e)&&h(t,e)}/*!
	 * Block for `objectEqual` ensuring non-existing
	 * values don't get in.
	 *
	 * @param {Mixed} object
	 * @return {Boolean} result
	 */
function p(t){return null!==t&&void 0!==t}/*!
	 * Recursively check the equality of two objects.
	 * Once basic sameness has been established it will
	 * defer to `deepEqual` for each enumerable key
	 * in the object.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */
function l(t,e,n){if(!p(t)||!p(e))return!1;if(t.prototype!==e.prototype)return!1;var o;if(n){for(o=0;o<n.length;o++)if(n[o][0]===t&&n[o][1]===e||n[o][0]===e&&n[o][1]===t)return!0}else n=[];try{var i=c(t),s=c(e)}catch(u){return!1}if(i.sort(),s.sort(),!h(i,s))return!1;n.push([t,e]);var a;for(o=i.length-1;o>=0;o--)if(a=i[o],!r(t[a],e[a],n))return!1;return!0}/*!
	 * deep-eql
	 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Module dependencies
	 */
var d,y=n(86);try{d=n(60).Buffer}catch(v){d={},d.isBuffer=function(){return!1}}/*!
	 * Primary Export
	 */
t.exports=r},function(t,e,n){t.exports=n(87)},function(t,e){function n(t){var e=Object.prototype.toString.call(t);return o[e]?o[e]:null===t?"null":void 0===t?"undefined":t===Object(t)?"object":typeof t}function r(){this.tests={}}/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Primary Exports
	 */
var e=t.exports=n,o={"[object Array]":"array","[object RegExp]":"regexp","[object Function]":"function","[object Arguments]":"arguments","[object Date]":"date"};e.Library=r,r.prototype.of=n,r.prototype.define=function(t,e){return 1===arguments.length?this.tests[t]:(this.tests[t]=e,this)},r.prototype.test=function(t,e){if(e===n(t))return!0;var r=this.tests[e];if(r&&"regexp"===n(r))return r.test(t);if(r&&"function"===n(r))return r(t);throw new ReferenceError('Type test "'+e+'" not defined or invalid.')}},function(t,e,n){/*!
	 * Chai - getPathValue utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * @see https://github.com/logicalparadox/filtr
	 * MIT Licensed
	 */
var r=n(89);t.exports=function(t,e){var n=r(t,e);return n.value}},function(t,e,n){/*!
	 * ## parsePath(path)
	 *
	 * Helper function used to parse string object
	 * paths. Use in conjunction with `_getPathValue`.
	 *
	 *      var parsed = parsePath('myobject.property.subprop');
	 *
	 * ### Paths:
	 *
	 * * Can be as near infinitely deep and nested
	 * * Arrays are also valid using the formal `myobject.document[3].property`.
	 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
	 *
	 * @param {String} path
	 * @returns {Object} parsed
	 * @api private
	 */
function r(t){var e=t.replace(/([^\\])\[/g,"$1.["),n=e.match(/(\\\.|[^.]+?)+/g);return n.map(function(t){var e=/^\[(\d+)\]$/,n=e.exec(t);return n?{i:parseFloat(n[1])}:{p:t.replace(/\\([.\[\]])/g,"$1")}})}/*!
	 * ## _getPathValue(parsed, obj)
	 *
	 * Helper companion function for `.parsePath` that returns
	 * the value located at the parsed address.
	 *
	 *      var value = getPathValue(parsed, obj);
	 *
	 * @param {Object} parsed definition from `parsePath`.
	 * @param {Object} object to search against
	 * @param {Number} object to search against
	 * @returns {Object|Undefined} value
	 * @api private
	 */
function o(t,e,n){var r,o=e;n=void 0===n?t.length:n;for(var i=0,s=n;i<s;i++){var u=t[i];o?("undefined"!=typeof u.p?o=o[u.p]:"undefined"!=typeof u.i&&(o=o[u.i]),i==s-1&&(r=o)):r=void 0}return r}/*!
	 * Chai - getPathInfo utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var i=n(90);t.exports=function(t,e){var n=r(t),s=n[n.length-1],u={parent:n.length>1?o(n,e,n.length-1):e,name:s.p||s.i,value:o(n,e)};return u.exists=i(u.name,u.parent),u}},function(t,e,n){/*!
	 * Chai - hasProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var r=n(72),o={number:Number,string:String};t.exports=function(t,e){var n=r(e);return"null"!==n&&"undefined"!==n&&(o[n]&&"object"!=typeof e&&(e=new o[n](e)),t in e)}},function(t,e,n){/*!
	 * Chai - addProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var r=n(82),o=n(71);t.exports=function(t,e,n){Object.defineProperty(t,e,{get:function i(){var t=o(this,"ssfi");t&&r.includeStack===!1&&o(this,"ssfi",i);var e=n.call(this);return void 0===e?this:e},configurable:!0})}},function(t,e,n){/*!
	 * Chai - addMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var r=n(82),o=n(71);t.exports=function(t,e,n){t[e]=function(){var i=o(this,"ssfi");i&&r.includeStack===!1&&o(this,"ssfi",t[e]);var s=n.apply(this,arguments);return void 0===s?this:s}}},function(t,e){/*!
	 * Chai - overwriteProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e,n){var r=Object.getOwnPropertyDescriptor(t,e),o=function(){};r&&"function"==typeof r.get&&(o=r.get),Object.defineProperty(t,e,{get:function(){var t=n(o).call(this);return void 0===t?this:t},configurable:!0})}},function(t,e){/*!
	 * Chai - overwriteMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e,n){var r=t[e],o=function(){return this};r&&"function"==typeof r&&(o=r),t[e]=function(){var t=n(o).apply(this,arguments);return void 0===t?this:t}}},function(t,e,n){/*!
	 * Chai - addChainingMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
/*!
	 * Module dependencies
	 */
var r=n(83),o=n(71),i=n(82),s="__proto__"in Object,u=/^(?:length|name|arguments|caller)$/,a=Function.prototype.call,c=Function.prototype.apply;t.exports=function(t,e,n,h){"function"!=typeof h&&(h=function(){});var f={method:n,chainingBehavior:h};t.__methods||(t.__methods={}),t.__methods[e]=f,Object.defineProperty(t,e,{get:function(){f.chainingBehavior.call(this);var e=function p(){var t=o(this,"ssfi");t&&i.includeStack===!1&&o(this,"ssfi",p);var e=f.method.apply(this,arguments);return void 0===e?this:e};if(s){var n=e.__proto__=Object.create(this);n.call=a,n.apply=c}else{var h=Object.getOwnPropertyNames(t);h.forEach(function(n){if(!u.test(n)){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r)}})}return r(this,e),e},configurable:!0})}},function(t,e){/*!
	 * Chai - overwriteChainableMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e,n,r){var o=t.__methods[e],i=o.chainingBehavior;o.chainingBehavior=function(){var t=r(i).call(this);return void 0===t?this:t};var s=o.method;o.method=function(){var t=n(s).apply(this,arguments);return void 0===t?this:t}}},function(t,e,n){/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
var r=n(82);t.exports=function(t,e){/*!
	   * Assertion Constructor
	   *
	   * Creates object for chaining.
	   *
	   * @api private
	   */
function n(t,e,n){i(this,"ssfi",n||arguments.callee),i(this,"object",t),i(this,"message",e)}/*!
	   * Module dependencies.
	   */
var o=t.AssertionError,i=e.flag;/*!
	   * Module export.
	   */
t.Assertion=n,Object.defineProperty(n,"includeStack",{get:function(){return console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."),r.includeStack},set:function(t){console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."),r.includeStack=t}}),Object.defineProperty(n,"showDiff",{get:function(){return console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."),r.showDiff},set:function(t){console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."),r.showDiff=t}}),n.addProperty=function(t,n){e.addProperty(this.prototype,t,n)},n.addMethod=function(t,n){e.addMethod(this.prototype,t,n)},n.addChainableMethod=function(t,n,r){e.addChainableMethod(this.prototype,t,n,r)},n.overwriteProperty=function(t,n){e.overwriteProperty(this.prototype,t,n)},n.overwriteMethod=function(t,n){e.overwriteMethod(this.prototype,t,n)},n.overwriteChainableMethod=function(t,n,r){e.overwriteChainableMethod(this.prototype,t,n,r)},n.prototype.assert=function(t,n,s,u,a,c){var h=e.test(this,arguments);if(!0!==c&&(c=!1),!0!==r.showDiff&&(c=!1),!h){var n=e.getMessage(this,arguments),f=e.getActual(this,arguments);throw new o(n,{actual:f,expected:u,showDiff:c},r.includeStack?this.assert:i(this,"ssfi"))}},/*!
	   * ### ._obj
	   *
	   * Quick reference to stored `actual` value for plugin developers.
	   *
	   * @api private
	   */
Object.defineProperty(n.prototype,"_obj",{get:function(){return i(this,"object")},set:function(t){i(this,"object",t)}})}},function(t,e){/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e){function n(t,n){n&&T(this,"message",n),t=t.toLowerCase();var r=T(this,"object"),o=~["a","e","i","o","u"].indexOf(t.charAt(0))?"an ":"a ";this.assert(t===e.type(r),"expected #{this} to be "+o+t,"expected #{this} not to be "+o+t)}function r(){T(this,"contains",!0)}function o(t,n){e.expectTypes(this,["array","object","string"]),n&&T(this,"message",n);var r=T(this,"object"),o=!1;if("array"===e.type(r)&&"object"===e.type(t)){for(var i in r)if(e.eql(r[i],t)){o=!0;break}}else if("object"===e.type(t)){if(!T(this,"negate")){for(var s in t)new P(r).property(s,t[s]);return}var u={};for(var s in t)u[s]=r[s];o=e.eql(u,t)}else o=void 0!=r&&~r.indexOf(t);this.assert(o,"expected #{this} to include "+e.inspect(t),"expected #{this} to not include "+e.inspect(t))}function i(){var t=T(this,"object"),e=Object.prototype.toString.call(t);this.assert("[object Arguments]"===e,"expected #{this} to be arguments but got "+e,"expected #{this} to not be arguments")}function s(t,e){e&&T(this,"message",e);var n=T(this,"object");return T(this,"deep")?this.eql(t):void this.assert(t===n,"expected #{this} to equal #{exp}","expected #{this} to not equal #{exp}",t,this._obj,!0)}function u(t,n){n&&T(this,"message",n),this.assert(e.eql(t,T(this,"object")),"expected #{this} to deeply equal #{exp}","expected #{this} to not deeply equal #{exp}",t,this._obj,!0)}function a(t,e){e&&T(this,"message",e);var n=T(this,"object");if(T(this,"doLength")){new P(n,e).to.have.property("length");var r=n.length;this.assert(r>t,"expected #{this} to have a length above #{exp} but got #{act}","expected #{this} to not have a length above #{exp}",t,r)}else this.assert(n>t,"expected #{this} to be above "+t,"expected #{this} to be at most "+t)}function c(t,e){e&&T(this,"message",e);var n=T(this,"object");if(T(this,"doLength")){new P(n,e).to.have.property("length");var r=n.length;this.assert(r>=t,"expected #{this} to have a length at least #{exp} but got #{act}","expected #{this} to have a length below #{exp}",t,r)}else this.assert(n>=t,"expected #{this} to be at least "+t,"expected #{this} to be below "+t)}function h(t,e){e&&T(this,"message",e);var n=T(this,"object");if(T(this,"doLength")){new P(n,e).to.have.property("length");var r=n.length;this.assert(r<t,"expected #{this} to have a length below #{exp} but got #{act}","expected #{this} to not have a length below #{exp}",t,r)}else this.assert(n<t,"expected #{this} to be below "+t,"expected #{this} to be at least "+t)}function f(t,e){e&&T(this,"message",e);var n=T(this,"object");if(T(this,"doLength")){new P(n,e).to.have.property("length");var r=n.length;this.assert(r<=t,"expected #{this} to have a length at most #{exp} but got #{act}","expected #{this} to have a length above #{exp}",t,r)}else this.assert(n<=t,"expected #{this} to be at most "+t,"expected #{this} to be above "+t)}function p(t,n){n&&T(this,"message",n);var r=e.getName(t);this.assert(T(this,"object")instanceof t,"expected #{this} to be an instance of "+r,"expected #{this} to not be an instance of "+r)}function l(t,n){n&&T(this,"message",n);var r=T(this,"object");this.assert(r.hasOwnProperty(t),"expected #{this} to have own property "+e.inspect(t),"expected #{this} to not have own property "+e.inspect(t))}function d(t,n,r){"string"==typeof n&&(r=n,n=null),r&&T(this,"message",r);var o=T(this,"object"),i=Object.getOwnPropertyDescriptor(Object(o),t);i&&n?this.assert(e.eql(n,i),"expected the own property descriptor for "+e.inspect(t)+" on #{this} to match "+e.inspect(n)+", got "+e.inspect(i),"expected the own property descriptor for "+e.inspect(t)+" on #{this} to not match "+e.inspect(n),n,i,!0):this.assert(i,"expected #{this} to have an own property descriptor for "+e.inspect(t),"expected #{this} to not have an own property descriptor for "+e.inspect(t)),T(this,"object",i)}function y(){T(this,"doLength",!0)}function v(t,e){e&&T(this,"message",e);var n=T(this,"object");new P(n,e).to.have.property("length");var r=n.length;this.assert(r==t,"expected #{this} to have a length of #{exp} but got #{act}","expected #{this} to not have a length of #{act}",t,r)}function g(t,e){e&&T(this,"message",e);var n=T(this,"object");this.assert(t.exec(n),"expected #{this} to match "+t,"expected #{this} not to match "+t)}function b(t){var n,r=T(this,"object"),o=!0,i="keys must be given single argument of Array|Object|String, or multiple String arguments";switch(e.type(t)){case"array":if(arguments.length>1)throw new Error(i);break;case"object":if(arguments.length>1)throw new Error(i);t=Object.keys(t);break;default:t=Array.prototype.slice.call(arguments)}if(!t.length)throw new Error("keys required");var s=Object.keys(r),u=t,a=t.length,c=T(this,"any"),h=T(this,"all");if(c||h||(h=!0),c){var f=u.filter(function(t){return~s.indexOf(t)});o=f.length>0}if(h&&(o=t.every(function(t){return~s.indexOf(t)}),T(this,"negate")||T(this,"contains")||(o=o&&t.length==s.length)),a>1){t=t.map(function(t){return e.inspect(t)});var p=t.pop();h&&(n=t.join(", ")+", and "+p),c&&(n=t.join(", ")+", or "+p)}else n=e.inspect(t[0]);n=(a>1?"keys ":"key ")+n,n=(T(this,"contains")?"contain ":"have ")+n,this.assert(o,"expected #{this} to "+n,"expected #{this} to not "+n,u.slice(0).sort(),s.sort(),!0)}function m(t,n,r){r&&T(this,"message",r);var o=T(this,"object");new P(o,r).is.a("function");var i=!1,s=null,u=null,a=null;0===arguments.length?(n=null,t=null):t&&(t instanceof RegExp||"string"==typeof t)?(n=t,t=null):t&&t instanceof Error?(s=t,t=null,n=null):"function"==typeof t?(u=t.prototype.name,(!u||"Error"===u&&t!==Error)&&(u=t.name||(new t).name)):t=null;try{o()}catch(c){if(s)return this.assert(c===s,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp}",s instanceof Error?s.toString():s,c instanceof Error?c.toString():c),T(this,"object",c),this;if(t&&(this.assert(c instanceof t,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp} but #{act} was thrown",u,c instanceof Error?c.toString():c),!n))return T(this,"object",c),this;var h="error"===e.type(c)&&"message"in c?c.message:""+c;if(null!=h&&n&&n instanceof RegExp)return this.assert(n.exec(h),"expected #{this} to throw error matching #{exp} but got #{act}","expected #{this} to throw error not matching #{exp}",n,h),T(this,"object",c),this;if(null!=h&&n&&"string"==typeof n)return this.assert(~h.indexOf(n),"expected #{this} to throw error including #{exp} but got #{act}","expected #{this} to throw error not including #{act}",n,h),T(this,"object",c),this;i=!0,a=c}var f="",p=null!==u?u:s?"#{exp}":"an error";i&&(f=" but #{act} was thrown"),this.assert(i===!0,"expected #{this} to throw "+p+f,"expected #{this} to not throw "+p+f,s instanceof Error?s.toString():s,a instanceof Error?a.toString():a),T(this,"object",a)}function _(t,n){n&&T(this,"message",n);var r=T(this,"object"),o=T(this,"itself"),i="function"!==e.type(r)||o?r[t]:r.prototype[t];this.assert("function"==typeof i,"expected #{this} to respond to "+e.inspect(t),"expected #{this} to not respond to "+e.inspect(t))}function w(t,n){n&&T(this,"message",n);var r=T(this,"object"),o=t(r);this.assert(o,"expected #{this} to satisfy "+e.objDisplay(t),"expected #{this} to not satisfy"+e.objDisplay(t),!this.negate,o)}function x(t,n,r){r&&T(this,"message",r);var o=T(this,"object");if(new P(o,r).is.a("number"),"number"!==e.type(t)||"number"!==e.type(n))throw new Error("the arguments to closeTo or approximately must be numbers");this.assert(Math.abs(o-t)<=n,"expected #{this} to be close to "+t+" +/- "+n,"expected #{this} not to be close to "+t+" +/- "+n)}function E(t,e,n){return t.every(function(t){return n?e.some(function(e){return n(t,e)}):e.indexOf(t)!==-1})}function O(t,e){e&&T(this,"message",e);var n=T(this,"object");new P(t).to.be.an("array"),this.assert(t.indexOf(n)>-1,"expected #{this} to be one of #{exp}","expected #{this} to not be one of #{exp}",t,n)}function S(t,e,n){n&&T(this,"message",n);var r=T(this,"object");new P(t,n).to.have.property(e),new P(r).is.a("function");var o=t[e];r(),this.assert(o!==t[e],"expected ."+e+" to change","expected ."+e+" to not change")}function k(t,e,n){n&&T(this,"message",n);var r=T(this,"object");new P(t,n).to.have.property(e),new P(r).is.a("function");var o=t[e];r(),this.assert(t[e]-o>0,"expected ."+e+" to increase","expected ."+e+" to not increase")}function j(t,e,n){n&&T(this,"message",n);var r=T(this,"object");new P(t,n).to.have.property(e),new P(r).is.a("function");var o=t[e];r(),this.assert(t[e]-o<0,"expected ."+e+" to decrease","expected ."+e+" to not decrease")}var P=t.Assertion,T=(Object.prototype.toString,e.flag);["to","be","been","is","and","has","have","with","that","which","at","of","same"].forEach(function(t){P.addProperty(t,function(){return this})}),P.addProperty("not",function(){T(this,"negate",!0)}),P.addProperty("deep",function(){T(this,"deep",!0)}),P.addProperty("any",function(){T(this,"any",!0),T(this,"all",!1)}),P.addProperty("all",function(){T(this,"all",!0),T(this,"any",!1)}),P.addChainableMethod("an",n),P.addChainableMethod("a",n),P.addChainableMethod("include",o,r),P.addChainableMethod("contain",o,r),P.addChainableMethod("contains",o,r),P.addChainableMethod("includes",o,r),P.addProperty("ok",function(){this.assert(T(this,"object"),"expected #{this} to be truthy","expected #{this} to be falsy")}),P.addProperty("true",function(){this.assert(!0===T(this,"object"),"expected #{this} to be true","expected #{this} to be false",!this.negate)}),P.addProperty("false",function(){this.assert(!1===T(this,"object"),"expected #{this} to be false","expected #{this} to be true",!!this.negate)}),P.addProperty("null",function(){this.assert(null===T(this,"object"),"expected #{this} to be null","expected #{this} not to be null")}),P.addProperty("undefined",function(){this.assert(void 0===T(this,"object"),"expected #{this} to be undefined","expected #{this} not to be undefined")}),P.addProperty("NaN",function(){this.assert(isNaN(T(this,"object")),"expected #{this} to be NaN","expected #{this} not to be NaN")}),P.addProperty("exist",function(){this.assert(null!=T(this,"object"),"expected #{this} to exist","expected #{this} to not exist")}),P.addProperty("empty",function(){var t=T(this,"object"),e=t;Array.isArray(t)||"string"==typeof object?e=t.length:"object"==typeof t&&(e=Object.keys(t).length),this.assert(!e,"expected #{this} to be empty","expected #{this} not to be empty")}),P.addProperty("arguments",i),P.addProperty("Arguments",i),P.addMethod("equal",s),P.addMethod("equals",s),P.addMethod("eq",s),P.addMethod("eql",u),P.addMethod("eqls",u),P.addMethod("above",a),P.addMethod("gt",a),P.addMethod("greaterThan",a),P.addMethod("least",c),P.addMethod("gte",c),P.addMethod("below",h),P.addMethod("lt",h),P.addMethod("lessThan",h),P.addMethod("most",f),P.addMethod("lte",f),P.addMethod("within",function(t,e,n){n&&T(this,"message",n);var r=T(this,"object"),o=t+".."+e;if(T(this,"doLength")){new P(r,n).to.have.property("length");var i=r.length;this.assert(i>=t&&i<=e,"expected #{this} to have a length within "+o,"expected #{this} to not have a length within "+o)}else this.assert(r>=t&&r<=e,"expected #{this} to be within "+o,"expected #{this} to not be within "+o)}),P.addMethod("instanceof",p),P.addMethod("instanceOf",p),P.addMethod("property",function(t,n,r){r&&T(this,"message",r);var o=!!T(this,"deep"),i=o?"deep property ":"property ",s=T(this,"negate"),u=T(this,"object"),a=o?e.getPathInfo(t,u):null,c=o?a.exists:e.hasProperty(t,u),h=o?a.value:u[t];if(s&&arguments.length>1){if(void 0===h)throw r=null!=r?r+": ":"",new Error(r+e.inspect(u)+" has no "+i+e.inspect(t))}else this.assert(c,"expected #{this} to have a "+i+e.inspect(t),"expected #{this} to not have "+i+e.inspect(t));arguments.length>1&&this.assert(n===h,"expected #{this} to have a "+i+e.inspect(t)+" of #{exp}, but got #{act}","expected #{this} to not have a "+i+e.inspect(t)+" of #{act}",n,h),T(this,"object",h)}),P.addMethod("ownProperty",l),P.addMethod("haveOwnProperty",l),P.addMethod("ownPropertyDescriptor",d),P.addMethod("haveOwnPropertyDescriptor",d),P.addChainableMethod("length",v,y),P.addMethod("lengthOf",v),P.addMethod("match",g),P.addMethod("matches",g),P.addMethod("string",function(t,n){n&&T(this,"message",n);var r=T(this,"object");new P(r,n).is.a("string"),this.assert(~r.indexOf(t),"expected #{this} to contain "+e.inspect(t),"expected #{this} to not contain "+e.inspect(t))}),P.addMethod("keys",b),P.addMethod("key",b),P.addMethod("throw",m),P.addMethod("throws",m),P.addMethod("Throw",m),P.addMethod("respondTo",_),P.addMethod("respondsTo",_),P.addProperty("itself",function(){T(this,"itself",!0)}),P.addMethod("satisfy",w),P.addMethod("satisfies",w),P.addMethod("closeTo",x),P.addMethod("approximately",x),P.addMethod("members",function(t,n){n&&T(this,"message",n);var r=T(this,"object");new P(r).to.be.an("array"),new P(t).to.be.an("array");var o=T(this,"deep")?e.eql:void 0;return T(this,"contains")?this.assert(E(t,r,o),"expected #{this} to be a superset of #{act}","expected #{this} to not be a superset of #{act}",r,t):void this.assert(E(r,t,o)&&E(t,r,o),"expected #{this} to have the same members as #{act}","expected #{this} to not have the same members as #{act}",r,t)}),P.addMethod("oneOf",O),P.addChainableMethod("change",S),P.addChainableMethod("changes",S),P.addChainableMethod("increase",k),P.addChainableMethod("increases",k),P.addChainableMethod("decrease",j),P.addChainableMethod("decreases",j),P.addProperty("extensible",function(){var t,e=T(this,"object");try{t=Object.isExtensible(e)}catch(n){if(!(n instanceof TypeError))throw n;t=!1}this.assert(t,"expected #{this} to be extensible","expected #{this} to not be extensible")}),P.addProperty("sealed",function(){var t,e=T(this,"object");try{t=Object.isSealed(e)}catch(n){if(!(n instanceof TypeError))throw n;t=!0}this.assert(t,"expected #{this} to be sealed","expected #{this} to not be sealed")}),P.addProperty("frozen",function(){var t,e=T(this,"object");try{t=Object.isFrozen(e)}catch(n){if(!(n instanceof TypeError))throw n;t=!0}this.assert(t,"expected #{this} to be frozen","expected #{this} to not be frozen")})}},function(t,e){/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e){t.expect=function(e,n){return new t.Assertion(e,n)},t.expect.fail=function(e,n,r,o){throw r=r||"expect.fail()",new t.AssertionError(r,{actual:e,expected:n,operator:o},t.expect.fail)}}},function(t,e){/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e){function n(){function e(){return this instanceof String||this instanceof Number||this instanceof Boolean?new r(this.valueOf(),null,e):new r(this,null,e)}function n(t){Object.defineProperty(this,"should",{value:t,enumerable:!0,configurable:!0,writable:!0})}Object.defineProperty(Object.prototype,"should",{set:n,get:e,configurable:!0});var o={};return o.fail=function(e,n,r,i){throw r=r||"should.fail()",new t.AssertionError(r,{actual:e,expected:n,operator:i},o.fail)},o.equal=function(t,e,n){new r(t,n).to.equal(e)},o.Throw=function(t,e,n,o){new r(t,o).to.Throw(e,n)},o.exist=function(t,e){new r(t,e).to.exist},o.not={},o.not.equal=function(t,e,n){new r(t,n).to.not.equal(e)},o.not.Throw=function(t,e,n,o){new r(t,o).to.not.Throw(e,n)},o.not.exist=function(t,e){new r(t,e).to.not.exist},o["throw"]=o.Throw,o.not["throw"]=o.not.Throw,o}var r=t.Assertion;t.should=n,t.Should=n}},function(t,e){/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
t.exports=function(t,e){/*!
	   * Chai dependencies.
	   */
var n=t.Assertion,r=e.flag,o=t.assert=function(e,r){var o=new n(null,null,t.assert);o.assert(e,r,"[ negation message unavailable ]")};o.fail=function(e,n,r,i){throw r=r||"assert.fail()",new t.AssertionError(r,{actual:e,expected:n,operator:i},o.fail)},o.isOk=function(t,e){new n(t,e).is.ok},o.isNotOk=function(t,e){new n(t,e).is.not.ok},o.equal=function(t,e,i){var s=new n(t,i,o.equal);s.assert(e==r(s,"object"),"expected #{this} to equal #{exp}","expected #{this} to not equal #{act}",e,t)},o.notEqual=function(t,e,i){var s=new n(t,i,o.notEqual);s.assert(e!=r(s,"object"),"expected #{this} to not equal #{exp}","expected #{this} to equal #{act}",e,t)},o.strictEqual=function(t,e,r){new n(t,r).to.equal(e)},o.notStrictEqual=function(t,e,r){new n(t,r).to.not.equal(e)},o.deepEqual=function(t,e,r){new n(t,r).to.eql(e)},o.notDeepEqual=function(t,e,r){new n(t,r).to.not.eql(e)},o.isAbove=function(t,e,r){new n(t,r).to.be.above(e)},o.isAtLeast=function(t,e,r){new n(t,r).to.be.least(e)},o.isBelow=function(t,e,r){new n(t,r).to.be.below(e)},o.isAtMost=function(t,e,r){new n(t,r).to.be.most(e)},o.isTrue=function(t,e){new n(t,e).is["true"]},o.isNotTrue=function(t,e){new n(t,e).to.not.equal(!0)},o.isFalse=function(t,e){new n(t,e).is["false"]},o.isNotFalse=function(t,e){new n(t,e).to.not.equal(!1)},o.isNull=function(t,e){new n(t,e).to.equal(null)},o.isNotNull=function(t,e){new n(t,e).to.not.equal(null)},o.isNaN=function(t,e){new n(t,e).to.be.NaN},o.isNotNaN=function(t,e){new n(t,e).not.to.be.NaN},o.isUndefined=function(t,e){new n(t,e).to.equal(void 0)},o.isDefined=function(t,e){new n(t,e).to.not.equal(void 0)},o.isFunction=function(t,e){new n(t,e).to.be.a("function")},o.isNotFunction=function(t,e){new n(t,e).to.not.be.a("function")},o.isObject=function(t,e){new n(t,e).to.be.a("object")},o.isNotObject=function(t,e){new n(t,e).to.not.be.a("object")},o.isArray=function(t,e){new n(t,e).to.be.an("array")},o.isNotArray=function(t,e){new n(t,e).to.not.be.an("array")},o.isString=function(t,e){new n(t,e).to.be.a("string")},o.isNotString=function(t,e){new n(t,e).to.not.be.a("string")},o.isNumber=function(t,e){new n(t,e).to.be.a("number")},o.isNotNumber=function(t,e){new n(t,e).to.not.be.a("number")},o.isBoolean=function(t,e){new n(t,e).to.be.a("boolean")},o.isNotBoolean=function(t,e){new n(t,e).to.not.be.a("boolean")},o.typeOf=function(t,e,r){new n(t,r).to.be.a(e)},o.notTypeOf=function(t,e,r){new n(t,r).to.not.be.a(e)},o.instanceOf=function(t,e,r){new n(t,r).to.be.instanceOf(e)},o.notInstanceOf=function(t,e,r){new n(t,r).to.not.be.instanceOf(e)},o.include=function(t,e,r){new n(t,r,o.include).include(e)},o.notInclude=function(t,e,r){new n(t,r,o.notInclude).not.include(e)},o.match=function(t,e,r){new n(t,r).to.match(e)},o.notMatch=function(t,e,r){new n(t,r).to.not.match(e)},o.property=function(t,e,r){new n(t,r).to.have.property(e)},o.notProperty=function(t,e,r){new n(t,r).to.not.have.property(e)},o.deepProperty=function(t,e,r){new n(t,r).to.have.deep.property(e)},o.notDeepProperty=function(t,e,r){new n(t,r).to.not.have.deep.property(e)},o.propertyVal=function(t,e,r,o){new n(t,o).to.have.property(e,r)},o.propertyNotVal=function(t,e,r,o){new n(t,o).to.not.have.property(e,r)},o.deepPropertyVal=function(t,e,r,o){new n(t,o).to.have.deep.property(e,r)},o.deepPropertyNotVal=function(t,e,r,o){new n(t,o).to.not.have.deep.property(e,r)},o.lengthOf=function(t,e,r){new n(t,r).to.have.length(e)},o["throws"]=function(t,e,o,i){("string"==typeof e||e instanceof RegExp)&&(o=e,e=null);var s=new n(t,i).to["throw"](e,o);return r(s,"object")},o.doesNotThrow=function(t,e,r){"string"==typeof e&&(r=e,e=null),new n(t,r).to.not.Throw(e)},o.operator=function(t,o,i,s){var u;switch(o){case"==":u=t==i;break;case"===":u=t===i;break;case">":u=t>i;break;case">=":u=t>=i;break;case"<":u=t<i;break;case"<=":u=t<=i;break;case"!=":u=t!=i;break;case"!==":u=t!==i;break;default:throw new Error('Invalid operator "'+o+'"')}var a=new n(u,s);a.assert(!0===r(a,"object"),"expected "+e.inspect(t)+" to be "+o+" "+e.inspect(i),"expected "+e.inspect(t)+" to not be "+o+" "+e.inspect(i))},o.closeTo=function(t,e,r,o){new n(t,o).to.be.closeTo(e,r)},o.approximately=function(t,e,r,o){new n(t,o).to.be.approximately(e,r)},o.sameMembers=function(t,e,r){new n(t,r).to.have.same.members(e)},o.sameDeepMembers=function(t,e,r){new n(t,r).to.have.same.deep.members(e)},o.includeMembers=function(t,e,r){new n(t,r).to.include.members(e)},o.includeDeepMembers=function(t,e,r){new n(t,r).to.include.deep.members(e)},o.oneOf=function(t,e,r){new n(t,r).to.be.oneOf(e)},o.changes=function(t,e,r){new n(t).to.change(e,r)},o.doesNotChange=function(t,e,r){new n(t).to.not.change(e,r)},o.increases=function(t,e,r){new n(t).to.increase(e,r)},o.doesNotIncrease=function(t,e,r){new n(t).to.not.increase(e,r)},o.decreases=function(t,e,r){new n(t).to.decrease(e,r)},o.doesNotDecrease=function(t,e,r){new n(t).to.not.decrease(e,r)},/*!
	   * ### .ifError(object)
	   *
	   * Asserts if value is not a false value, and throws if it is a true value.
	   * This is added to allow for chai to be a drop-in replacement for Node's
	   * assert class.
	   *
	   *     var err = new Error('I am a custom error');
	   *     assert.ifError(err); // Rethrows err!
	   *
	   * @name ifError
	   * @param {Object} object
	   * @namespace Assert
	   * @api public
	   */
o.ifError=function(t){if(t)throw t},o.isExtensible=function(t,e){new n(t,e).to.be.extensible},o.isNotExtensible=function(t,e){new n(t,e).to.not.be.extensible},o.isSealed=function(t,e){new n(t,e).to.be.sealed},o.isNotSealed=function(t,e){new n(t,e).to.not.be.sealed},o.isFrozen=function(t,e){new n(t,e).to.be.frozen},o.isNotFrozen=function(t,e){new n(t,e).to.not.be.frozen},/*!
	   * Aliases.
	   */
function i(t,e){return o[e]=o[t],i}("isOk","ok")("isNotOk","notOk")("throws","throw")("throws","Throw")("isExtensible","extensible")("isNotExtensible","notExtensible")("isSealed","sealed")("isNotSealed","notSealed")("isFrozen","frozen")("isNotFrozen","notFrozen")}},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,